--- a/net/minecraft/src/Reflector.java
+++ b/net/minecraft/src/Reflector.java
@@ -1,68 +1,36 @@
 package net.minecraft.src;
 
 import com.google.common.base.Optional;
+
 import it.unimi.dsi.fastutil.longs.Long2ObjectMap;
+
 import java.lang.reflect.Constructor;
 import java.lang.reflect.Field;
 import java.lang.reflect.InvocationTargetException;
 import java.lang.reflect.Method;
+import java.util.ArrayList;
+import java.util.List;
 import java.util.Map;
+
 import javax.vecmath.Matrix4f;
+
 import net.minecraft.block.Block;
 import net.minecraft.block.properties.IProperty;
 import net.minecraft.block.state.IBlockState;
 import net.minecraft.client.Minecraft;
-import net.minecraft.client.gui.GuiMainMenu;
+import net.minecraft.client.gui.FontRenderer;
+import net.minecraft.client.gui.GuiButton;
 import net.minecraft.client.gui.GuiScreen;
-import net.minecraft.client.model.ModelBanner;
-import net.minecraft.client.model.ModelBase;
-import net.minecraft.client.model.ModelBat;
-import net.minecraft.client.model.ModelBlaze;
-import net.minecraft.client.model.ModelBook;
-import net.minecraft.client.model.ModelChest;
-import net.minecraft.client.model.ModelDragon;
-import net.minecraft.client.model.ModelDragonHead;
-import net.minecraft.client.model.ModelEnderCrystal;
-import net.minecraft.client.model.ModelEnderMite;
-import net.minecraft.client.model.ModelGhast;
-import net.minecraft.client.model.ModelGuardian;
-import net.minecraft.client.model.ModelHorse;
-import net.minecraft.client.model.ModelHumanoidHead;
-import net.minecraft.client.model.ModelLeashKnot;
-import net.minecraft.client.model.ModelMagmaCube;
-import net.minecraft.client.model.ModelOcelot;
-import net.minecraft.client.model.ModelRabbit;
-import net.minecraft.client.model.ModelRenderer;
-import net.minecraft.client.model.ModelShulker;
-import net.minecraft.client.model.ModelShulkerBullet;
-import net.minecraft.client.model.ModelSign;
-import net.minecraft.client.model.ModelSilverfish;
-import net.minecraft.client.model.ModelSkeletonHead;
-import net.minecraft.client.model.ModelSlime;
-import net.minecraft.client.model.ModelSquid;
-import net.minecraft.client.model.ModelWitch;
-import net.minecraft.client.model.ModelWither;
-import net.minecraft.client.model.ModelWolf;
-import net.minecraft.client.multiplayer.ChunkProviderClient;
+import net.minecraft.client.particle.ParticleManager;
 import net.minecraft.client.renderer.EntityRenderer;
 import net.minecraft.client.renderer.block.model.ItemOverrideList;
 import net.minecraft.client.renderer.block.model.ModelManager;
 import net.minecraft.client.renderer.block.model.ModelRotation;
-import net.minecraft.client.renderer.entity.RenderBoat;
-import net.minecraft.client.renderer.entity.RenderLeashKnot;
 import net.minecraft.client.renderer.entity.RenderLivingBase;
 import net.minecraft.client.renderer.entity.RenderManager;
-import net.minecraft.client.renderer.entity.RenderMinecart;
-import net.minecraft.client.renderer.entity.RenderShulkerBullet;
-import net.minecraft.client.renderer.tileentity.RenderEnderCrystal;
+import net.minecraft.client.renderer.entity.RenderPlayer;
 import net.minecraft.client.renderer.tileentity.RenderItemFrame;
-import net.minecraft.client.renderer.tileentity.RenderWitherSkull;
-import net.minecraft.client.renderer.tileentity.TileEntityBannerRenderer;
-import net.minecraft.client.renderer.tileentity.TileEntityChestRenderer;
-import net.minecraft.client.renderer.tileentity.TileEntityEnchantmentTableRenderer;
-import net.minecraft.client.renderer.tileentity.TileEntityEnderChestRenderer;
-import net.minecraft.client.renderer.tileentity.TileEntitySignRenderer;
-import net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer;
+import net.minecraft.client.renderer.tileentity.TileEntityRendererDispatcher;
 import net.minecraft.client.renderer.vertex.VertexFormatElement;
 import net.minecraft.client.resources.DefaultResourcePack;
 import net.minecraft.client.settings.KeyBinding;
@@ -70,214 +38,218 @@
 import net.minecraft.entity.EntityLivingBase;
 import net.minecraft.entity.EnumCreatureType;
 import net.minecraft.entity.item.EntityItemFrame;
+import net.minecraft.entity.player.EntityPlayer;
 import net.minecraft.entity.player.EntityPlayerMP;
+import net.minecraft.inventory.Container;
 import net.minecraft.item.Item;
 import net.minecraft.item.ItemArmor;
 import net.minecraft.item.ItemRecord;
+import net.minecraft.item.ItemStack;
 import net.minecraft.potion.Potion;
 import net.minecraft.potion.PotionEffect;
+import net.minecraft.stats.Achievement;
 import net.minecraft.tileentity.TileEntity;
 import net.minecraft.util.BlockRenderLayer;
+import net.minecraft.util.DamageSource;
+import net.minecraft.util.EnumHand;
+import net.minecraft.util.Session;
 import net.minecraft.util.math.BlockPos;
 import net.minecraft.util.math.ChunkPos;
+import net.minecraft.util.math.Vec3d;
 import net.minecraft.world.ChunkCache;
 import net.minecraft.world.World;
 import net.minecraft.world.WorldProvider;
 import net.minecraft.world.biome.Biome;
+import net.minecraft.client.model.*;
 import net.minecraftforge.common.property.IUnlistedProperty;
 
 public class Reflector
 {
-    private static boolean logForge = logEntry("*** Reflector Forge ***");
-    public static ReflectorClass Attributes = new ReflectorClass("net.minecraftforge.client.model.Attributes");
-    public static ReflectorField Attributes_DEFAULT_BAKED_FORMAT = new ReflectorField(Attributes, "DEFAULT_BAKED_FORMAT");
-    public static ReflectorClass BetterFoliageClient = new ReflectorClass("mods.betterfoliage.client.BetterFoliageClient");
     public static ReflectorClass BlamingTransformer = new ReflectorClass("net.minecraftforge.fml.common.asm.transformers.BlamingTransformer");
     public static ReflectorMethod BlamingTransformer_onCrash = new ReflectorMethod(BlamingTransformer, "onCrash");
-    public static ReflectorClass ChunkWatchEvent_UnWatch = new ReflectorClass("net.minecraftforge.event.world.ChunkWatchEvent$UnWatch");
-    public static ReflectorConstructor ChunkWatchEvent_UnWatch_Constructor = new ReflectorConstructor(ChunkWatchEvent_UnWatch, new Class[] {ChunkPos.class, EntityPlayerMP.class});
-    public static ReflectorClass CoreModManager = new ReflectorClass("net.minecraftforge.fml.relauncher.CoreModManager");
-    public static ReflectorMethod CoreModManager_onCrash = new ReflectorMethod(CoreModManager, "onCrash");
-    public static ReflectorClass DimensionManager = new ReflectorClass("net.minecraftforge.common.DimensionManager");
-    public static ReflectorMethod DimensionManager_createProviderFor = new ReflectorMethod(DimensionManager, "createProviderFor");
-    public static ReflectorMethod DimensionManager_getStaticDimensionIDs = new ReflectorMethod(DimensionManager, "getStaticDimensionIDs");
-    public static ReflectorClass DrawScreenEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$DrawScreenEvent$Pre");
-    public static ReflectorConstructor DrawScreenEvent_Pre_Constructor = new ReflectorConstructor(DrawScreenEvent_Pre, new Class[] {GuiScreen.class, Integer.TYPE, Integer.TYPE, Float.TYPE});
-    public static ReflectorClass DrawScreenEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$DrawScreenEvent$Post");
-    public static ReflectorConstructor DrawScreenEvent_Post_Constructor = new ReflectorConstructor(DrawScreenEvent_Post, new Class[] {GuiScreen.class, Integer.TYPE, Integer.TYPE, Float.TYPE});
-    public static ReflectorClass EntityViewRenderEvent_CameraSetup = new ReflectorClass("net.minecraftforge.client.event.EntityViewRenderEvent$CameraSetup");
-    public static ReflectorConstructor EntityViewRenderEvent_CameraSetup_Constructor = new ReflectorConstructor(EntityViewRenderEvent_CameraSetup, new Class[] {EntityRenderer.class, Entity.class, IBlockState.class, Double.TYPE, Float.TYPE, Float.TYPE, Float.TYPE});
-    public static ReflectorMethod EntityViewRenderEvent_CameraSetup_getRoll = new ReflectorMethod(EntityViewRenderEvent_CameraSetup, "getRoll");
-    public static ReflectorMethod EntityViewRenderEvent_CameraSetup_getPitch = new ReflectorMethod(EntityViewRenderEvent_CameraSetup, "getPitch");
-    public static ReflectorMethod EntityViewRenderEvent_CameraSetup_getYaw = new ReflectorMethod(EntityViewRenderEvent_CameraSetup, "getYaw");
-    public static ReflectorClass EntityViewRenderEvent_FogColors = new ReflectorClass("net.minecraftforge.client.event.EntityViewRenderEvent$FogColors");
-    public static ReflectorConstructor EntityViewRenderEvent_FogColors_Constructor = new ReflectorConstructor(EntityViewRenderEvent_FogColors, new Class[] {EntityRenderer.class, Entity.class, IBlockState.class, Double.TYPE, Float.TYPE, Float.TYPE, Float.TYPE});
-    public static ReflectorMethod EntityViewRenderEvent_FogColors_getRed = new ReflectorMethod(EntityViewRenderEvent_FogColors, "getRed");
-    public static ReflectorMethod EntityViewRenderEvent_FogColors_getGreen = new ReflectorMethod(EntityViewRenderEvent_FogColors, "getGreen");
-    public static ReflectorMethod EntityViewRenderEvent_FogColors_getBlue = new ReflectorMethod(EntityViewRenderEvent_FogColors, "getBlue");
-    public static ReflectorClass EntityViewRenderEvent_RenderFogEvent = new ReflectorClass("net.minecraftforge.client.event.EntityViewRenderEvent$RenderFogEvent");
-    public static ReflectorConstructor EntityViewRenderEvent_RenderFogEvent_Constructor = new ReflectorConstructor(EntityViewRenderEvent_RenderFogEvent, new Class[] {EntityRenderer.class, Entity.class, IBlockState.class, Double.TYPE, Integer.TYPE, Float.TYPE});
-    public static ReflectorClass Event = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.Event");
-    public static ReflectorMethod Event_isCanceled = new ReflectorMethod(Event, "isCanceled");
-    public static ReflectorClass EventBus = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.EventBus");
-    public static ReflectorMethod EventBus_post = new ReflectorMethod(EventBus, "post");
-    public static ReflectorClass Event_Result = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.Event$Result");
-    public static ReflectorField Event_Result_DENY = new ReflectorField(Event_Result, "DENY");
-    public static ReflectorField Event_Result_ALLOW = new ReflectorField(Event_Result, "ALLOW");
-    public static ReflectorField Event_Result_DEFAULT = new ReflectorField(Event_Result, "DEFAULT");
-    public static ReflectorClass ExtendedBlockState = new ReflectorClass("net.minecraftforge.common.property.ExtendedBlockState");
-    public static ReflectorConstructor ExtendedBlockState_Constructor = new ReflectorConstructor(ExtendedBlockState, new Class[] {Block.class, IProperty[].class, IUnlistedProperty[].class});
-    public static ReflectorClass FMLClientHandler = new ReflectorClass("net.minecraftforge.fml.client.FMLClientHandler");
-    public static ReflectorMethod FMLClientHandler_instance = new ReflectorMethod(FMLClientHandler, "instance");
-    public static ReflectorMethod FMLClientHandler_isLoading = new ReflectorMethod(FMLClientHandler, "isLoading");
-    public static ReflectorMethod FMLClientHandler_trackBrokenTexture = new ReflectorMethod(FMLClientHandler, "trackBrokenTexture");
-    public static ReflectorMethod FMLClientHandler_trackMissingTexture = new ReflectorMethod(FMLClientHandler, "trackMissingTexture");
-    public static ReflectorClass FMLCommonHandler = new ReflectorClass("net.minecraftforge.fml.common.FMLCommonHandler");
-    public static ReflectorMethod FMLCommonHandler_callFuture = new ReflectorMethod(FMLCommonHandler, "callFuture");
-    public static ReflectorMethod FMLCommonHandler_enhanceCrashReport = new ReflectorMethod(FMLCommonHandler, "enhanceCrashReport");
-    public static ReflectorMethod FMLCommonHandler_getBrandings = new ReflectorMethod(FMLCommonHandler, "getBrandings");
-    public static ReflectorMethod FMLCommonHandler_handleServerAboutToStart = new ReflectorMethod(FMLCommonHandler, "handleServerAboutToStart");
-    public static ReflectorMethod FMLCommonHandler_handleServerStarting = new ReflectorMethod(FMLCommonHandler, "handleServerStarting");
-    public static ReflectorMethod FMLCommonHandler_instance = new ReflectorMethod(FMLCommonHandler, "instance");
-    public static ReflectorClass ForgeBiome = new ReflectorClass(Biome.class);
-    public static ReflectorMethod ForgeBiome_getWaterColorMultiplier = new ReflectorMethod(ForgeBiome, "getWaterColorMultiplier");
-    public static ReflectorClass ForgeBlock = new ReflectorClass(Block.class);
-    public static ReflectorMethod ForgeBlock_addDestroyEffects = new ReflectorMethod(ForgeBlock, "addDestroyEffects");
+	public static ReflectorClass CoreModManager = new ReflectorClass("net.minecraftforge.fml.relauncher.CoreModManager");
+	public static ReflectorMethod CoreModManager_onCrash = new ReflectorMethod(CoreModManager, "onCrash");
+	public static ReflectorClass DimensionManager = new ReflectorClass("net.minecraftforge.common.DimensionManager");
+	public static ReflectorMethod DimensionManager_getStaticDimensionIDs = new ReflectorMethod(DimensionManager, "getStaticDimensionIDs");
+	public static ReflectorMethod DimensionManager_createProviderFor = new ReflectorMethod(DimensionManager, "createProviderFor");
+	public static ReflectorClass DrawScreenEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$DrawScreenEvent$Pre");
+	public static ReflectorConstructor DrawScreenEvent_Pre_Constructor = new ReflectorConstructor(DrawScreenEvent_Pre, new Class[] {GuiScreen.class, Integer.TYPE, Integer.TYPE, Float.TYPE});
+	public static ReflectorClass DrawScreenEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$DrawScreenEvent$Post");
+	public static ReflectorConstructor DrawScreenEvent_Post_Constructor = new ReflectorConstructor(DrawScreenEvent_Post, new Class[] {GuiScreen.class, Integer.TYPE, Integer.TYPE, Float.TYPE});
+	public static ReflectorClass EntityViewRenderEvent_FogColors = new ReflectorClass("net.minecraftforge.client.event.EntityViewRenderEvent$FogColors");
+	public static ReflectorConstructor EntityViewRenderEvent_FogColors_Constructor = new ReflectorConstructor(EntityViewRenderEvent_FogColors, new Class[] {EntityRenderer.class, Entity.class, IBlockState.class, Double.TYPE, Float.TYPE, Float.TYPE, Float.TYPE});
+	public static ReflectorMethod EntityViewRenderEvent_FogColors_getRed = new ReflectorMethod(EntityViewRenderEvent_FogColors, "getRed");
+	public static ReflectorMethod EntityViewRenderEvent_FogColors_getGreen = new ReflectorMethod(EntityViewRenderEvent_FogColors, "getGreen");
+	public static ReflectorMethod EntityViewRenderEvent_FogColors_getBlue = new ReflectorMethod(EntityViewRenderEvent_FogColors, "getBlue");
+	public static ReflectorClass EntityViewRenderEvent_RenderFogEvent = new ReflectorClass("net.minecraftforge.client.event.EntityViewRenderEvent$RenderFogEvent");
+	public static ReflectorConstructor EntityViewRenderEvent_RenderFogEvent_Constructor = new ReflectorConstructor(EntityViewRenderEvent_RenderFogEvent, new Class[] {EntityRenderer.class, Entity.class, IBlockState.class, Double.TYPE, Integer.TYPE, Float.TYPE});
+	public static ReflectorClass EntityViewRenderEvent_CameraSetup = new ReflectorClass("net.minecraftforge.client.event.EntityViewRenderEvent$CameraSetup");
+	public static ReflectorConstructor EntityViewRenderEvent_CameraSetup_Constructor = new ReflectorConstructor(EntityViewRenderEvent_CameraSetup, new Class[] {EntityRenderer.class, Entity.class, IBlockState.class, Double.TYPE, Float.TYPE, Float.TYPE, Float.TYPE});
+	public static ReflectorMethod EntityViewRenderEvent_CameraSetup_getRoll = new ReflectorMethod(EntityViewRenderEvent_CameraSetup, "getRoll");
+	public static ReflectorMethod EntityViewRenderEvent_CameraSetup_getPitch = new ReflectorMethod(EntityViewRenderEvent_CameraSetup, "getPitch");
+	public static ReflectorMethod EntityViewRenderEvent_CameraSetup_getYaw = new ReflectorMethod(EntityViewRenderEvent_CameraSetup, "getYaw");
+	public static ReflectorClass EventBus = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.EventBus");
+	public static ReflectorMethod EventBus_post = new ReflectorMethod(EventBus, "post");
+	public static ReflectorClass Event_Result = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.Event$Result");
+	public static ReflectorField Event_Result_DENY = new ReflectorField(Event_Result, "DENY");
+	public static ReflectorField Event_Result_ALLOW = new ReflectorField(Event_Result, "ALLOW");
+	public static ReflectorField Event_Result_DEFAULT = new ReflectorField(Event_Result, "DEFAULT");
+	public static ReflectorClass ExtendedBlockState = new ReflectorClass("net.minecraftforge.common.property.ExtendedBlockState");
+	public static ReflectorConstructor ExtendedBlockState_Constructor = new ReflectorConstructor(ExtendedBlockState, new Class[] {Block.class, IProperty[].class, IUnlistedProperty[].class});
+	public static ReflectorClass FMLClientHandler = new ReflectorClass("net.minecraftforge.fml.client.FMLClientHandler");
+	public static ReflectorMethod FMLClientHandler_instance = new ReflectorMethod(FMLClientHandler, "instance");
+	public static ReflectorMethod FMLClientHandler_isLoading = new ReflectorMethod(FMLClientHandler, "isLoading");
+	public static ReflectorMethod FMLClientHandler_trackBrokenTexture = new ReflectorMethod(FMLClientHandler, "trackBrokenTexture");
+	public static ReflectorMethod FMLClientHandler_trackMissingTexture = new ReflectorMethod(FMLClientHandler, "trackMissingTexture");
+	public static ReflectorClass FMLCommonHandler = new ReflectorClass("net.minecraftforge.fml.common.FMLCommonHandler");
+	public static ReflectorMethod FMLCommonHandler_callFuture = new ReflectorMethod(FMLCommonHandler, "callFuture");
+	public static ReflectorMethod FMLCommonHandler_enhanceCrashReport = new ReflectorMethod(FMLCommonHandler, "enhanceCrashReport");
+	public static ReflectorMethod FMLCommonHandler_getBrandings = new ReflectorMethod(FMLCommonHandler, "getBrandings");
+	public static ReflectorMethod FMLCommonHandler_handleServerAboutToStart = new ReflectorMethod(FMLCommonHandler, "handleServerAboutToStart");
+	public static ReflectorMethod FMLCommonHandler_handleServerStarting = new ReflectorMethod(FMLCommonHandler, "handleServerStarting");
+	public static ReflectorMethod FMLCommonHandler_instance = new ReflectorMethod(FMLCommonHandler, "instance");
+	public static ReflectorClass ForgeBlock = new ReflectorClass(Block.class);
+	public static ReflectorMethod ForgeBlock_addDestroyEffects = new ReflectorMethod(ForgeBlock, "addDestroyEffects");
     public static ReflectorMethod ForgeBlock_addHitEffects = new ReflectorMethod(ForgeBlock, "addHitEffects");
     public static ReflectorMethod ForgeBlock_canCreatureSpawn = new ReflectorMethod(ForgeBlock, "canCreatureSpawn");
-    public static ReflectorMethod ForgeBlock_canRenderInLayer = new ReflectorMethod(ForgeBlock, "canRenderInLayer", new Class[] {IBlockState.class, BlockRenderLayer.class});
-    public static ReflectorMethod ForgeBlock_doesSideBlockRendering = new ReflectorMethod(ForgeBlock, "doesSideBlockRendering");
+	public static ReflectorMethod ForgeBlock_canRenderInLayer = new ReflectorMethod(ForgeBlock, "canRenderInLayer", new Class[] {IBlockState.class, BlockRenderLayer.class});
+	public static ReflectorMethod ForgeBlock_doesSideBlockRendering = new ReflectorMethod(ForgeBlock, "doesSideBlockRendering");
     public static ReflectorMethod ForgeBlock_getBedDirection = new ReflectorMethod(ForgeBlock, "getBedDirection");
-    public static ReflectorMethod ForgeBlock_getExtendedState = new ReflectorMethod(ForgeBlock, "getExtendedState");
-    public static ReflectorMethod ForgeBlock_getLightOpacity = new ReflectorMethod(ForgeBlock, "getLightOpacity");
-    public static ReflectorMethod ForgeBlock_getLightValue = new ReflectorMethod(ForgeBlock, "getLightValue");
-    public static ReflectorMethod ForgeBlock_getSoundType = new ReflectorMethod(ForgeBlock, "getSoundType", new Class[] {IBlockState.class, World.class, BlockPos.class, Entity.class});
+	public static ReflectorMethod ForgeBlock_getExtendedState = new ReflectorMethod(ForgeBlock, "getExtendedState");
+	public static ReflectorMethod ForgeBlock_getLightOpacity = new ReflectorMethod(ForgeBlock, "getLightOpacity");
+	public static ReflectorMethod ForgeBlock_getLightValue = new ReflectorMethod(ForgeBlock, "getLightValue");
+	public static ReflectorMethod ForgeBlock_getSoundType = new ReflectorMethod(ForgeBlock, "getSoundType", new Class[] {IBlockState.class, World.class, BlockPos.class, Entity.class});
     public static ReflectorMethod ForgeBlock_hasTileEntity = new ReflectorMethod(ForgeBlock, "hasTileEntity", new Class[] {IBlockState.class});
-    public static ReflectorMethod ForgeBlock_isAir = new ReflectorMethod(ForgeBlock, "isAir");
+	public static ReflectorMethod ForgeBlock_isAir = new ReflectorMethod(ForgeBlock, "isAir");
     public static ReflectorMethod ForgeBlock_isBed = new ReflectorMethod(ForgeBlock, "isBed");
     public static ReflectorMethod ForgeBlock_isBedFoot = new ReflectorMethod(ForgeBlock, "isBedFoot");
-    public static ReflectorMethod ForgeBlock_isSideSolid = new ReflectorMethod(ForgeBlock, "isSideSolid");
+	public static ReflectorMethod ForgeBlock_isSideSolid = new ReflectorMethod(ForgeBlock, "isSideSolid");
     public static ReflectorClass ForgeChunkCache = new ReflectorClass(ChunkCache.class);
     public static ReflectorMethod ForgeChunkCache_isSideSolid = new ReflectorMethod(ForgeChunkCache, "isSideSolid");
-    public static ReflectorClass ForgeEntity = new ReflectorClass(Entity.class);
+	public static ReflectorClass ForgeEntity = new ReflectorClass(Entity.class);
     public static ReflectorMethod ForgeEntity_canRiderInteract = new ReflectorMethod(ForgeEntity, "canRiderInteract");
-    public static ReflectorField ForgeEntity_captureDrops = new ReflectorField(ForgeEntity, "captureDrops");
-    public static ReflectorField ForgeEntity_capturedDrops = new ReflectorField(ForgeEntity, "capturedDrops");
-    public static ReflectorMethod ForgeEntity_shouldRenderInPass = new ReflectorMethod(ForgeEntity, "shouldRenderInPass");
-    public static ReflectorMethod ForgeEntity_shouldRiderSit = new ReflectorMethod(ForgeEntity, "shouldRiderSit");
-    public static ReflectorClass ForgeEventFactory = new ReflectorClass("net.minecraftforge.event.ForgeEventFactory");
-    public static ReflectorMethod ForgeEventFactory_canEntityDespawn = new ReflectorMethod(ForgeEventFactory, "canEntityDespawn");
-    public static ReflectorMethod ForgeEventFactory_canEntitySpawn = new ReflectorMethod(ForgeEventFactory, "canEntitySpawn");
-    public static ReflectorMethod ForgeEventFactory_renderBlockOverlay = new ReflectorMethod(ForgeEventFactory, "renderBlockOverlay");
-    public static ReflectorMethod ForgeEventFactory_renderFireOverlay = new ReflectorMethod(ForgeEventFactory, "renderFireOverlay");
-    public static ReflectorMethod ForgeEventFactory_renderWaterOverlay = new ReflectorMethod(ForgeEventFactory, "renderWaterOverlay");
-    public static ReflectorClass ForgeHooks = new ReflectorClass("net.minecraftforge.common.ForgeHooks");
-    public static ReflectorMethod ForgeHooks_onLivingAttack = new ReflectorMethod(ForgeHooks, "onLivingAttack");
-    public static ReflectorMethod ForgeHooks_onLivingDeath = new ReflectorMethod(ForgeHooks, "onLivingDeath");
-    public static ReflectorMethod ForgeHooks_onLivingDrops = new ReflectorMethod(ForgeHooks, "onLivingDrops");
-    public static ReflectorMethod ForgeHooks_onLivingFall = new ReflectorMethod(ForgeHooks, "onLivingFall");
-    public static ReflectorMethod ForgeHooks_onLivingHurt = new ReflectorMethod(ForgeHooks, "onLivingHurt");
-    public static ReflectorMethod ForgeHooks_onLivingJump = new ReflectorMethod(ForgeHooks, "onLivingJump");
-    public static ReflectorMethod ForgeHooks_onLivingSetAttackTarget = new ReflectorMethod(ForgeHooks, "onLivingSetAttackTarget");
-    public static ReflectorMethod ForgeHooks_onLivingUpdate = new ReflectorMethod(ForgeHooks, "onLivingUpdate");
-    public static ReflectorClass ForgeHooksClient = new ReflectorClass("net.minecraftforge.client.ForgeHooksClient");
-    public static ReflectorMethod ForgeHooksClient_applyTransform = new ReflectorMethod(ForgeHooksClient, "applyTransform", new Class[] {Matrix4f.class, Optional.class});
-    public static ReflectorMethod ForgeHooksClient_applyUVLock = new ReflectorMethod(ForgeHooksClient, "applyUVLock");
-    public static ReflectorMethod ForgeHooksClient_dispatchRenderLast = new ReflectorMethod(ForgeHooksClient, "dispatchRenderLast");
-    public static ReflectorMethod ForgeHooksClient_drawScreen = new ReflectorMethod(ForgeHooksClient, "drawScreen");
-    public static ReflectorMethod ForgeHooksClient_fillNormal = new ReflectorMethod(ForgeHooksClient, "fillNormal");
-    public static ReflectorMethod ForgeHooksClient_handleCameraTransforms = new ReflectorMethod(ForgeHooksClient, "handleCameraTransforms");
-    public static ReflectorMethod ForgeHooksClient_getArmorModel = new ReflectorMethod(ForgeHooksClient, "getArmorModel");
-    public static ReflectorMethod ForgeHooksClient_getArmorTexture = new ReflectorMethod(ForgeHooksClient, "getArmorTexture");
-    public static ReflectorMethod ForgeHooksClient_getFogDensity = new ReflectorMethod(ForgeHooksClient, "getFogDensity");
-    public static ReflectorMethod ForgeHooksClient_getFOVModifier = new ReflectorMethod(ForgeHooksClient, "getFOVModifier");
-    public static ReflectorMethod ForgeHooksClient_getMatrix = new ReflectorMethod(ForgeHooksClient, "getMatrix", new Class[] {ModelRotation.class});
-    public static ReflectorMethod ForgeHooksClient_getOffsetFOV = new ReflectorMethod(ForgeHooksClient, "getOffsetFOV");
-    public static ReflectorMethod ForgeHooksClient_loadEntityShader = new ReflectorMethod(ForgeHooksClient, "loadEntityShader");
-    public static ReflectorMethod ForgeHooksClient_mainMenuMouseClick = new ReflectorMethod(ForgeHooksClient, "mainMenuMouseClick");
-    public static ReflectorMethod ForgeHooksClient_onDrawBlockHighlight = new ReflectorMethod(ForgeHooksClient, "onDrawBlockHighlight");
-    public static ReflectorMethod ForgeHooksClient_onFogRender = new ReflectorMethod(ForgeHooksClient, "onFogRender");
-    public static ReflectorMethod ForgeHooksClient_onScreenshot = new ReflectorMethod(ForgeHooksClient, "onScreenshot");
-    public static ReflectorMethod ForgeHooksClient_onTextureStitchedPre = new ReflectorMethod(ForgeHooksClient, "onTextureStitchedPre");
-    public static ReflectorMethod ForgeHooksClient_onTextureStitchedPost = new ReflectorMethod(ForgeHooksClient, "onTextureStitchedPost");
-    public static ReflectorMethod ForgeHooksClient_orientBedCamera = new ReflectorMethod(ForgeHooksClient, "orientBedCamera");
-    public static ReflectorMethod ForgeHooksClient_putQuadColor = new ReflectorMethod(ForgeHooksClient, "putQuadColor");
-    public static ReflectorMethod ForgeHooksClient_renderFirstPersonHand = new ReflectorMethod(ForgeHooksClient, "renderFirstPersonHand");
-    public static ReflectorMethod ForgeHooksClient_renderMainMenu = new ReflectorMethod(ForgeHooksClient, "renderMainMenu");
-    public static ReflectorMethod ForgeHooksClient_renderSpecificFirstPersonHand = new ReflectorMethod(ForgeHooksClient, "renderSpecificFirstPersonHand");
-    public static ReflectorMethod ForgeHooksClient_setRenderLayer = new ReflectorMethod(ForgeHooksClient, "setRenderLayer");
-    public static ReflectorMethod ForgeHooksClient_setRenderPass = new ReflectorMethod(ForgeHooksClient, "setRenderPass");
-    public static ReflectorMethod ForgeHooksClient_shouldCauseReequipAnimation = new ReflectorMethod(ForgeHooksClient, "shouldCauseReequipAnimation");
-    public static ReflectorMethod ForgeHooksClient_transform = new ReflectorMethod(ForgeHooksClient, "transform");
-    public static ReflectorClass ForgeItem = new ReflectorClass(Item.class);
+	public static ReflectorField ForgeEntity_captureDrops = new ReflectorField(ForgeEntity, "captureDrops");
+	public static ReflectorField ForgeEntity_capturedDrops = new ReflectorField(ForgeEntity, "capturedDrops");
+	public static ReflectorMethod ForgeEntity_shouldRenderInPass = new ReflectorMethod(ForgeEntity, "shouldRenderInPass");
+	public static ReflectorMethod ForgeEntity_shouldRiderSit = new ReflectorMethod(ForgeEntity, "shouldRiderSit");
+	public static ReflectorClass ForgeEventFactory = new ReflectorClass("net.minecraftforge.event.ForgeEventFactory");
+	public static ReflectorMethod ForgeEventFactory_canEntityDespawn = new ReflectorMethod(ForgeEventFactory, "canEntityDespawn");
+	public static ReflectorMethod ForgeEventFactory_canEntitySpawn = new ReflectorMethod(ForgeEventFactory, "canEntitySpawn");
+	public static ReflectorMethod ForgeEventFactory_renderBlockOverlay = new ReflectorMethod(ForgeEventFactory, "renderBlockOverlay");
+	public static ReflectorMethod ForgeEventFactory_renderFireOverlay = new ReflectorMethod(ForgeEventFactory, "renderFireOverlay");
+	public static ReflectorMethod ForgeEventFactory_renderWaterOverlay = new ReflectorMethod(ForgeEventFactory, "renderWaterOverlay");
+	public static ReflectorClass ForgeHooks = new ReflectorClass("net.minecraftforge.common.ForgeHooks");
+	public static ReflectorMethod ForgeHooks_onLivingAttack = new ReflectorMethod(ForgeHooks, "onLivingAttack");
+	public static ReflectorMethod ForgeHooks_onLivingDeath = new ReflectorMethod(ForgeHooks, "onLivingDeath");
+	public static ReflectorMethod ForgeHooks_onLivingDrops = new ReflectorMethod(ForgeHooks, "onLivingDrops");
+	public static ReflectorMethod ForgeHooks_onLivingFall = new ReflectorMethod(ForgeHooks, "onLivingFall");
+	public static ReflectorMethod ForgeHooks_onLivingHurt = new ReflectorMethod(ForgeHooks, "onLivingHurt");
+	public static ReflectorMethod ForgeHooks_onLivingJump = new ReflectorMethod(ForgeHooks, "onLivingJump");
+	public static ReflectorMethod ForgeHooks_onLivingSetAttackTarget = new ReflectorMethod(ForgeHooks, "onLivingSetAttackTarget");
+	public static ReflectorMethod ForgeHooks_onLivingUpdate = new ReflectorMethod(ForgeHooks, "onLivingUpdate");
+	public static ReflectorClass ForgeHooksClient = new ReflectorClass("net.minecraftforge.client.ForgeHooksClient");
+	public static ReflectorMethod ForgeHooksClient_applyTransform = new ReflectorMethod(ForgeHooksClient, "applyTransform", new Class[] {Matrix4f.class, Optional.class});
+	public static ReflectorMethod ForgeHooksClient_applyUVLock = new ReflectorMethod(ForgeHooksClient, "applyUVLock");
+	public static ReflectorMethod ForgeHooksClient_dispatchRenderLast = new ReflectorMethod(ForgeHooksClient, "dispatchRenderLast");
+	public static ReflectorMethod ForgeHooksClient_drawScreen = new ReflectorMethod(ForgeHooksClient, "drawScreen");
+	public static ReflectorMethod ForgeHooksClient_fillNormal = new ReflectorMethod(ForgeHooksClient, "fillNormal");
+	public static ReflectorMethod ForgeHooksClient_handleCameraTransforms = new ReflectorMethod(ForgeHooksClient, "handleCameraTransforms");
+	public static ReflectorMethod ForgeHooksClient_getArmorModel = new ReflectorMethod(ForgeHooksClient, "getArmorModel");
+	public static ReflectorMethod ForgeHooksClient_getArmorTexture = new ReflectorMethod(ForgeHooksClient, "getArmorTexture");
+	public static ReflectorMethod ForgeHooksClient_getFogDensity = new ReflectorMethod(ForgeHooksClient, "getFogDensity");
+	public static ReflectorMethod ForgeHooksClient_getFOVModifier = new ReflectorMethod(ForgeHooksClient, "getFOVModifier");
+	public static ReflectorMethod ForgeHooksClient_getMatrix = new ReflectorMethod(ForgeHooksClient, "getMatrix", new Class[] {ModelRotation.class});
+	public static ReflectorMethod ForgeHooksClient_getOffsetFOV = new ReflectorMethod(ForgeHooksClient, "getOffsetFOV");
+	public static ReflectorMethod ForgeHooksClient_loadEntityShader = new ReflectorMethod(ForgeHooksClient, "loadEntityShader");
+	public static ReflectorMethod ForgeHooksClient_mainMenuMouseClick = new ReflectorMethod(ForgeHooksClient, "mainMenuMouseClick");
+	public static ReflectorMethod ForgeHooksClient_onDrawBlockHighlight = new ReflectorMethod(ForgeHooksClient, "onDrawBlockHighlight");
+	public static ReflectorMethod ForgeHooksClient_onFogRender = new ReflectorMethod(ForgeHooksClient, "onFogRender");
+	public static ReflectorMethod ForgeHooksClient_onScreenshot = new ReflectorMethod(ForgeHooksClient, "onScreenshot");
+	public static ReflectorMethod ForgeHooksClient_onTextureStitchedPre = new ReflectorMethod(ForgeHooksClient, "onTextureStitchedPre");
+	public static ReflectorMethod ForgeHooksClient_onTextureStitchedPost = new ReflectorMethod(ForgeHooksClient, "onTextureStitchedPost");
+	public static ReflectorMethod ForgeHooksClient_orientBedCamera = new ReflectorMethod(ForgeHooksClient, "orientBedCamera");
+	public static ReflectorMethod ForgeHooksClient_putQuadColor = new ReflectorMethod(ForgeHooksClient, "putQuadColor");
+	public static ReflectorMethod ForgeHooksClient_renderFirstPersonHand = new ReflectorMethod(ForgeHooksClient, "renderFirstPersonHand");
+	public static ReflectorMethod ForgeHooksClient_renderMainMenu = new ReflectorMethod(ForgeHooksClient, "renderMainMenu");
+	public static ReflectorMethod ForgeHooksClient_renderSpecificFirstPersonHand = new ReflectorMethod(ForgeHooksClient, "renderSpecificFirstPersonHand");
+	public static ReflectorMethod ForgeHooksClient_setRenderLayer = new ReflectorMethod(ForgeHooksClient, "setRenderLayer");
+	public static ReflectorMethod ForgeHooksClient_setRenderPass = new ReflectorMethod(ForgeHooksClient, "setRenderPass");
+	public static ReflectorMethod ForgeHooksClient_shouldCauseReequipAnimation = new ReflectorMethod(ForgeHooksClient, "shouldCauseReequipAnimation");
+	public static ReflectorMethod ForgeHooksClient_transform = new ReflectorMethod(ForgeHooksClient, "transform");
+	public static ReflectorClass ForgeItem = new ReflectorClass(Item.class);
     public static ReflectorField ForgeItem_delegate = new ReflectorField(ForgeItem, "delegate");
-    public static ReflectorMethod ForgeItem_getDurabilityForDisplay = new ReflectorMethod(ForgeItem, "getDurabilityForDisplay");
-    public static ReflectorMethod ForgeItem_onEntitySwing = new ReflectorMethod(ForgeItem, "onEntitySwing");
-    public static ReflectorMethod ForgeItem_shouldCauseReequipAnimation = new ReflectorMethod(ForgeItem, "shouldCauseReequipAnimation");
-    public static ReflectorMethod ForgeItem_showDurabilityBar = new ReflectorMethod(ForgeItem, "showDurabilityBar");
-    public static ReflectorClass ForgeItemOverrideList = new ReflectorClass(ItemOverrideList.class);
-    public static ReflectorMethod ForgeItemOverrideList_handleItemState = new ReflectorMethod(ForgeItemOverrideList, "handleItemState");
-    public static ReflectorClass ForgeItemArmor = new ReflectorClass(ItemArmor.class);
-    public static ReflectorMethod ForgeItemArmor_hasOverlay = new ReflectorMethod(ForgeItemArmor, "hasOverlay");
-    public static ReflectorClass ForgeItemRecord = new ReflectorClass(ItemRecord.class);
-    public static ReflectorMethod ForgeItemRecord_getRecordResource = new ReflectorMethod(ForgeItemRecord, "getRecordResource", new Class[] {String.class});
-    public static ReflectorClass ForgeKeyBinding = new ReflectorClass(KeyBinding.class);
-    public static ReflectorMethod ForgeKeyBinding_setKeyConflictContext = new ReflectorMethod(ForgeKeyBinding, "setKeyConflictContext");
-    public static ReflectorMethod ForgeKeyBinding_setKeyModifierAndCode = new ReflectorMethod(ForgeKeyBinding, "setKeyModifierAndCode");
-    public static ReflectorMethod ForgeKeyBinding_getKeyModifier = new ReflectorMethod(ForgeKeyBinding, "getKeyModifier");
-    public static ReflectorClass ForgeModContainer = new ReflectorClass("net.minecraftforge.common.ForgeModContainer");
-    public static ReflectorField ForgeModContainer_forgeLightPipelineEnabled = new ReflectorField(ForgeModContainer, "forgeLightPipelineEnabled");
-    public static ReflectorClass ForgePotion = new ReflectorClass(Potion.class);
-    public static ReflectorMethod ForgePotion_shouldRenderHUD = ForgePotion.makeMethod("shouldRenderHUD");
-    public static ReflectorMethod ForgePotion_renderHUDEffect = ForgePotion.makeMethod("renderHUDEffect");
-    public static ReflectorClass ForgePotionEffect = new ReflectorClass(PotionEffect.class);
-    public static ReflectorMethod ForgePotionEffect_isCurativeItem = new ReflectorMethod(ForgePotionEffect, "isCurativeItem");
-    public static ReflectorClass ForgeTileEntity = new ReflectorClass(TileEntity.class);
-    public static ReflectorMethod ForgeTileEntity_canRenderBreaking = new ReflectorMethod(ForgeTileEntity, "canRenderBreaking");
-    public static ReflectorMethod ForgeTileEntity_getRenderBoundingBox = new ReflectorMethod(ForgeTileEntity, "getRenderBoundingBox");
-    public static ReflectorMethod ForgeTileEntity_hasFastRenderer = new ReflectorMethod(ForgeTileEntity, "hasFastRenderer");
-    public static ReflectorMethod ForgeTileEntity_shouldRenderInPass = new ReflectorMethod(ForgeTileEntity, "shouldRenderInPass");
-    public static ReflectorClass ForgeVertexFormatElementEnumUseage = new ReflectorClass(VertexFormatElement.EnumUsage.class);
-    public static ReflectorMethod ForgeVertexFormatElementEnumUseage_preDraw = new ReflectorMethod(ForgeVertexFormatElementEnumUseage, "preDraw");
-    public static ReflectorMethod ForgeVertexFormatElementEnumUseage_postDraw = new ReflectorMethod(ForgeVertexFormatElementEnumUseage, "postDraw");
-    public static ReflectorClass ForgeWorld = new ReflectorClass(World.class);
-    public static ReflectorMethod ForgeWorld_countEntities = new ReflectorMethod(ForgeWorld, "countEntities", new Class[] {EnumCreatureType.class, Boolean.TYPE});
-    public static ReflectorMethod ForgeWorld_getPerWorldStorage = new ReflectorMethod(ForgeWorld, "getPerWorldStorage");
-    public static ReflectorMethod ForgeWorld_initCapabilities = new ReflectorMethod(ForgeWorld, "initCapabilities");
-    public static ReflectorClass ForgeWorldProvider = new ReflectorClass(WorldProvider.class);
-    public static ReflectorMethod ForgeWorldProvider_getCloudRenderer = new ReflectorMethod(ForgeWorldProvider, "getCloudRenderer");
-    public static ReflectorMethod ForgeWorldProvider_getSkyRenderer = new ReflectorMethod(ForgeWorldProvider, "getSkyRenderer");
-    public static ReflectorMethod ForgeWorldProvider_getWeatherRenderer = new ReflectorMethod(ForgeWorldProvider, "getWeatherRenderer");
-    public static ReflectorClass GuiModList = new ReflectorClass("net.minecraftforge.fml.client.GuiModList");
-    public static ReflectorConstructor GuiModList_Constructor = new ReflectorConstructor(GuiModList, new Class[] {GuiScreen.class});
-    public static ReflectorClass IExtendedBlockState = new ReflectorClass("net.minecraftforge.common.property.IExtendedBlockState");
-    public static ReflectorMethod IExtendedBlockState_getClean = new ReflectorMethod(IExtendedBlockState, "getClean");
+	public static ReflectorMethod ForgeItem_onEntitySwing = new ReflectorMethod(ForgeItem, "onEntitySwing");
+	public static ReflectorMethod ForgeItem_shouldCauseReequipAnimation = new ReflectorMethod(ForgeItem, "shouldCauseReequipAnimation");
+	public static ReflectorMethod ForgeItem_showDurabilityBar = new ReflectorMethod(ForgeItem, "showDurabilityBar");
+	public static ReflectorClass ForgeItemOverrideList = new ReflectorClass(ItemOverrideList.class);
+	public static ReflectorMethod ForgeItemOverrideList_handleItemState = new ReflectorMethod(ForgeItemOverrideList, "handleItemState");
+	public static ReflectorClass ForgeItemArmor = new ReflectorClass(ItemArmor.class);
+	public static ReflectorMethod ForgeItemArmor_hasOverlay = new ReflectorMethod(ForgeItemArmor, "hasOverlay");
+	public static ReflectorClass ForgeItemRecord = new ReflectorClass(ItemRecord.class);
+	public static ReflectorMethod ForgeItemRecord_getRecordResource = new ReflectorMethod(ForgeItemRecord, "getRecordResource", new Class[] {String.class});
+	public static ReflectorClass ForgeKeyBinding = new ReflectorClass(KeyBinding.class);
+	public static ReflectorMethod ForgeKeyBinding_setKeyConflictContext = new ReflectorMethod(ForgeKeyBinding, "setKeyConflictContext");
+	public static ReflectorMethod ForgeKeyBinding_setKeyModifierAndCode = new ReflectorMethod(ForgeKeyBinding, "setKeyModifierAndCode");
+	public static ReflectorMethod ForgeKeyBinding_getKeyModifier = new ReflectorMethod(ForgeKeyBinding, "getKeyModifier");
+	public static ReflectorClass ForgeModContainer = new ReflectorClass("net.minecraftforge.common.ForgeModContainer");
+	public static ReflectorField ForgeModContainer_forgeLightPipelineEnabled = new ReflectorField(ForgeModContainer, "forgeLightPipelineEnabled");
+	public static ReflectorClass ForgePotion = new ReflectorClass(Potion.class);
+	public static ReflectorMethod ForgePotion_shouldRenderHUD = ForgePotion.makeMethod("shouldRenderHUD");
+	public static ReflectorMethod ForgePotion_renderHUDEffect = ForgePotion.makeMethod("renderHUDEffect");
+	public static ReflectorClass ForgePotionEffect = new ReflectorClass(PotionEffect.class);
+	public static ReflectorMethod ForgePotionEffect_isCurativeItem = new ReflectorMethod(ForgePotionEffect, "isCurativeItem");
+	public static ReflectorClass ForgeTileEntity = new ReflectorClass(TileEntity.class);
+	public static ReflectorMethod ForgeTileEntity_canRenderBreaking = new ReflectorMethod(ForgeTileEntity, "canRenderBreaking");
+	public static ReflectorMethod ForgeTileEntity_getRenderBoundingBox = new ReflectorMethod(ForgeTileEntity, "getRenderBoundingBox");
+	public static ReflectorMethod ForgeTileEntity_hasFastRenderer = new ReflectorMethod(ForgeTileEntity, "hasFastRenderer");
+	public static ReflectorMethod ForgeTileEntity_shouldRenderInPass = new ReflectorMethod(ForgeTileEntity, "shouldRenderInPass");
+	public static ReflectorClass ForgeVertexFormatElementEnumUseage = new ReflectorClass(VertexFormatElement.EnumUsage.class);
+	public static ReflectorMethod ForgeVertexFormatElementEnumUseage_preDraw = new ReflectorMethod(ForgeVertexFormatElementEnumUseage, "preDraw");
+	public static ReflectorMethod ForgeVertexFormatElementEnumUseage_postDraw = new ReflectorMethod(ForgeVertexFormatElementEnumUseage, "postDraw");
+	public static ReflectorClass ForgeWorld = new ReflectorClass(World.class);
+	public static ReflectorMethod ForgeWorld_countEntities = new ReflectorMethod(ForgeWorld, "countEntities", new Class[] {EnumCreatureType.class, Boolean.TYPE});
+	public static ReflectorMethod ForgeWorld_getPerWorldStorage = new ReflectorMethod(ForgeWorld, "getPerWorldStorage");
+	public static ReflectorMethod ForgeWorld_initCapabilities = new ReflectorMethod(ForgeWorld, "initCapabilities");
+	public static ReflectorClass ForgeWorldProvider = new ReflectorClass(WorldProvider.class);
+	public static ReflectorMethod ForgeWorldProvider_getCloudRenderer = new ReflectorMethod(ForgeWorldProvider, "getCloudRenderer");
+	public static ReflectorMethod ForgeWorldProvider_getSkyRenderer = new ReflectorMethod(ForgeWorldProvider, "getSkyRenderer");
+	public static ReflectorMethod ForgeWorldProvider_getWeatherRenderer = new ReflectorMethod(ForgeWorldProvider, "getWeatherRenderer");
+	public static ReflectorClass GuiModList = new ReflectorClass("net.minecraftforge.fml.client.GuiModList");
+	public static ReflectorConstructor GuiModList_Constructor = new ReflectorConstructor(GuiModList, new Class[] {GuiScreen.class});
+	public static ReflectorClass IExtendedBlockState = new ReflectorClass("net.minecraftforge.common.property.IExtendedBlockState");
+	public static ReflectorMethod IExtendedBlockState_getClean = new ReflectorMethod(IExtendedBlockState, "getClean");
     public static ReflectorClass IModel = new ReflectorClass("net.minecraftforge.client.model.IModel");
     public static ReflectorMethod IModel_getTextures = new ReflectorMethod(IModel, "getTextures");
-    public static ReflectorClass IRenderHandler = new ReflectorClass("net.minecraftforge.client.IRenderHandler");
-    public static ReflectorMethod IRenderHandler_render = new ReflectorMethod(IRenderHandler, "render");
-    public static ReflectorClass ItemModelMesherForge = new ReflectorClass("net.minecraftforge.client.ItemModelMesherForge");
-    public static ReflectorConstructor ItemModelMesherForge_Constructor = new ReflectorConstructor(ItemModelMesherForge, new Class[] {ModelManager.class});
-    public static ReflectorClass KeyConflictContext = new ReflectorClass("net.minecraftforge.client.settings.KeyConflictContext");
-    public static ReflectorField KeyConflictContext_IN_GAME = new ReflectorField(KeyConflictContext, "IN_GAME");
-    public static ReflectorClass KeyModifier = new ReflectorClass("net.minecraftforge.client.settings.KeyModifier");
-    public static ReflectorMethod KeyModifier_valueFromString = new ReflectorMethod(KeyModifier, "valueFromString");
-    public static ReflectorField KeyModifier_NONE = new ReflectorField(KeyModifier, "NONE");
-    public static ReflectorClass Launch = new ReflectorClass("net.minecraft.launchwrapper.Launch");
-    public static ReflectorField Launch_blackboard = new ReflectorField(Launch, "blackboard");
-    public static ReflectorClass LightUtil = new ReflectorClass("net.minecraftforge.client.model.pipeline.LightUtil");
-    public static ReflectorField LightUtil_itemConsumer = new ReflectorField(LightUtil, "itemConsumer");
-    public static ReflectorMethod LightUtil_putBakedQuad = new ReflectorMethod(LightUtil, "putBakedQuad");
-    public static ReflectorMethod LightUtil_renderQuadColor = new ReflectorMethod(LightUtil, "renderQuadColor");
-    public static ReflectorField LightUtil_tessellator = new ReflectorField(LightUtil, "tessellator");
-    public static ReflectorClass MinecraftForge = new ReflectorClass("net.minecraftforge.common.MinecraftForge");
-    public static ReflectorField MinecraftForge_EVENT_BUS = new ReflectorField(MinecraftForge, "EVENT_BUS");
-    public static ReflectorClass MinecraftForgeClient = new ReflectorClass("net.minecraftforge.client.MinecraftForgeClient");
-    public static ReflectorMethod MinecraftForgeClient_getRenderPass = new ReflectorMethod(MinecraftForgeClient, "getRenderPass");
-    public static ReflectorMethod MinecraftForgeClient_onRebuildChunk = new ReflectorMethod(MinecraftForgeClient, "onRebuildChunk");
-    public static ReflectorClass ModelLoader = new ReflectorClass("net.minecraftforge.client.model.ModelLoader");
+	public static ReflectorClass IRenderHandler = new ReflectorClass("net.minecraftforge.client.IRenderHandler");
+	public static ReflectorMethod IRenderHandler_render = new ReflectorMethod(IRenderHandler, "render");
+	public static ReflectorClass ItemModelMesherForge = new ReflectorClass("net.minecraftforge.client.ItemModelMesherForge");
+	public static ReflectorConstructor ItemModelMesherForge_Constructor = new ReflectorConstructor(ItemModelMesherForge, new Class[] {ModelManager.class});
+	public static ReflectorClass KeyConflictContext = new ReflectorClass("net.minecraftforge.client.settings.KeyConflictContext");
+	public static ReflectorField KeyConflictContext_IN_GAME = new ReflectorField(KeyConflictContext, "IN_GAME");
+	public static ReflectorClass KeyModifier = new ReflectorClass("net.minecraftforge.client.settings.KeyModifier");
+	public static ReflectorMethod KeyModifier_valueFromString = new ReflectorMethod(KeyModifier, "valueFromString");
+	public static ReflectorField KeyModifier_NONE = new ReflectorField(KeyModifier, "NONE");
+	public static ReflectorClass Launch = new ReflectorClass("net.minecraft.launchwrapper.Launch");
+	public static ReflectorField Launch_blackboard = new ReflectorField(Launch, "blackboard");
+	public static ReflectorClass LightUtil = new ReflectorClass("net.minecraftforge.client.model.pipeline.LightUtil");
+	public static ReflectorField LightUtil_tessellator = new ReflectorField(LightUtil, "tessellator");
+	public static ReflectorField LightUtil_itemConsumer = new ReflectorField(LightUtil, "itemConsumer");
+	public static ReflectorMethod LightUtil_putBakedQuad = new ReflectorMethod(LightUtil, "putBakedQuad");
+	public static ReflectorMethod LightUtil_renderQuadColor = new ReflectorMethod(LightUtil, "renderQuadColor");
+	public static ReflectorClass MinecraftForge = new ReflectorClass("net.minecraftforge.common.MinecraftForge");
+	public static ReflectorField MinecraftForge_EVENT_BUS = new ReflectorField(MinecraftForge, "EVENT_BUS");
+	public static ReflectorClass MinecraftForgeClient = new ReflectorClass("net.minecraftforge.client.MinecraftForgeClient");
+	public static ReflectorMethod MinecraftForgeClient_getRenderPass = new ReflectorMethod(MinecraftForgeClient, "getRenderPass");
+	public static ReflectorMethod MinecraftForgeClient_onRebuildChunk = new ReflectorMethod(MinecraftForgeClient, "onRebuildChunk");
+	public static ReflectorClass ModelLoader = new ReflectorClass("net.minecraftforge.client.model.ModelLoader");
     public static ReflectorField ModelLoader_stateModels = new ReflectorField(ModelLoader, "stateModels");
-    public static ReflectorMethod ModelLoader_onRegisterItems = new ReflectorMethod(ModelLoader, "onRegisterItems");
+	public static ReflectorMethod ModelLoader_onRegisterItems = new ReflectorMethod(ModelLoader, "onRegisterItems");
+	public static ReflectorClass Attributes = new ReflectorClass("net.minecraftforge.client.model.Attributes");
+	public static ReflectorField Attributes_DEFAULT_BAKED_FORMAT = new ReflectorField(Attributes, "DEFAULT_BAKED_FORMAT");
+	public static ReflectorClass BetterFoliageClient = new ReflectorClass("mods.betterfoliage.client.BetterFoliageClient");
+	public static ReflectorClass ForgeBiome = new ReflectorClass(Biome.class);
+	public static ReflectorMethod ForgeBiome_getWaterColorMultiplier = new ReflectorMethod(ForgeBiome, "getWaterColorMultiplier");
+
     public static ReflectorMethod ModelLoader_getInventoryVariant = new ReflectorMethod(ModelLoader, "getInventoryVariant");
     public static ReflectorClass ModelLoader_VanillaLoader = new ReflectorClass("net.minecraftforge.client.model.ModelLoader$VanillaLoader", true);
     public static ReflectorField ModelLoader_VanillaLoader_INSTANCE = new ReflectorField(ModelLoader_VanillaLoader, "INSTANCE", true);
@@ -288,741 +260,990 @@
     public static ReflectorMethod NotificationModUpdateScreen_init = new ReflectorMethod(NotificationModUpdateScreen, "init");
     public static ReflectorClass RenderBlockOverlayEvent_OverlayType = new ReflectorClass("net.minecraftforge.client.event.RenderBlockOverlayEvent$OverlayType");
     public static ReflectorField RenderBlockOverlayEvent_OverlayType_BLOCK = new ReflectorField(RenderBlockOverlayEvent_OverlayType, "BLOCK");
-    public static ReflectorClass RenderingRegistry = new ReflectorClass("net.minecraftforge.fml.client.registry.RenderingRegistry");
-    public static ReflectorMethod RenderingRegistry_loadEntityRenderers = new ReflectorMethod(RenderingRegistry, "loadEntityRenderers", new Class[] {RenderManager.class, Map.class});
-    public static ReflectorClass RenderItemInFrameEvent = new ReflectorClass("net.minecraftforge.client.event.RenderItemInFrameEvent");
-    public static ReflectorConstructor RenderItemInFrameEvent_Constructor = new ReflectorConstructor(RenderItemInFrameEvent, new Class[] {EntityItemFrame.class, RenderItemFrame.class});
-    public static ReflectorClass RenderLivingEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Pre");
-    public static ReflectorConstructor RenderLivingEvent_Pre_Constructor = new ReflectorConstructor(RenderLivingEvent_Pre, new Class[] {EntityLivingBase.class, RenderLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE});
-    public static ReflectorClass RenderLivingEvent_Post = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Post");
-    public static ReflectorConstructor RenderLivingEvent_Post_Constructor = new ReflectorConstructor(RenderLivingEvent_Post, new Class[] {EntityLivingBase.class, RenderLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE});
-    public static ReflectorClass RenderLivingEvent_Specials_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Specials$Pre");
-    public static ReflectorConstructor RenderLivingEvent_Specials_Pre_Constructor = new ReflectorConstructor(RenderLivingEvent_Specials_Pre, new Class[] {EntityLivingBase.class, RenderLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE});
-    public static ReflectorClass RenderLivingEvent_Specials_Post = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Specials$Post");
-    public static ReflectorConstructor RenderLivingEvent_Specials_Post_Constructor = new ReflectorConstructor(RenderLivingEvent_Specials_Post, new Class[] {EntityLivingBase.class, RenderLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE});
-    public static ReflectorClass ScreenshotEvent = new ReflectorClass("net.minecraftforge.client.event.ScreenshotEvent");
-    public static ReflectorMethod ScreenshotEvent_getCancelMessage = new ReflectorMethod(ScreenshotEvent, "getCancelMessage");
-    public static ReflectorMethod ScreenshotEvent_getScreenshotFile = new ReflectorMethod(ScreenshotEvent, "getScreenshotFile");
-    public static ReflectorMethod ScreenshotEvent_getResultMessage = new ReflectorMethod(ScreenshotEvent, "getResultMessage");
-    public static ReflectorClass SplashScreen = new ReflectorClass("net.minecraftforge.fml.client.SplashProgress");
-    public static ReflectorClass WorldEvent_Load = new ReflectorClass("net.minecraftforge.event.world.WorldEvent$Load");
-    public static ReflectorConstructor WorldEvent_Load_Constructor = new ReflectorConstructor(WorldEvent_Load, new Class[] {World.class});
-    private static boolean logVanilla = logEntry("*** Reflector Vanilla ***");
-    public static ReflectorClass ChunkProviderClient = new ReflectorClass(ChunkProviderClient.class);
-    public static ReflectorField ChunkProviderClient_chunkMapping = new ReflectorField(ChunkProviderClient, Long2ObjectMap.class);
-    public static ReflectorClass GuiMainMenu = new ReflectorClass(GuiMainMenu.class);
-    public static ReflectorField GuiMainMenu_splashText = new ReflectorField(GuiMainMenu, String.class);
-    public static ReflectorClass Minecraft = new ReflectorClass(Minecraft.class);
-    public static ReflectorField Minecraft_defaultResourcePack = new ReflectorField(Minecraft, DefaultResourcePack.class);
-    public static ReflectorField Minecraft_actionKeyF3 = new ReflectorField(new FieldLocatorActionKeyF3());
-    public static ReflectorClass ModelHumanoidHead = new ReflectorClass(ModelHumanoidHead.class);
-    public static ReflectorField ModelHumanoidHead_head = new ReflectorField(ModelHumanoidHead, ModelRenderer.class);
-    public static ReflectorClass ModelBat = new ReflectorClass(ModelBat.class);
-    public static ReflectorFields ModelBat_ModelRenderers = new ReflectorFields(ModelBat, ModelRenderer.class, 6);
-    public static ReflectorClass ModelBlaze = new ReflectorClass(ModelBlaze.class);
-    public static ReflectorField ModelBlaze_blazeHead = new ReflectorField(ModelBlaze, ModelRenderer.class);
-    public static ReflectorField ModelBlaze_blazeSticks = new ReflectorField(ModelBlaze, ModelRenderer[].class);
-    public static ReflectorClass ModelDragon = new ReflectorClass(ModelDragon.class);
-    public static ReflectorFields ModelDragon_ModelRenderers = new ReflectorFields(ModelDragon, ModelRenderer.class, 12);
-    public static ReflectorClass ModelEnderCrystal = new ReflectorClass(ModelEnderCrystal.class);
-    public static ReflectorFields ModelEnderCrystal_ModelRenderers = new ReflectorFields(ModelEnderCrystal, ModelRenderer.class, 3);
-    public static ReflectorClass RenderEnderCrystal = new ReflectorClass(RenderEnderCrystal.class);
-    public static ReflectorField RenderEnderCrystal_modelEnderCrystal = new ReflectorField(RenderEnderCrystal, ModelBase.class, 0);
-    public static ReflectorField RenderEnderCrystal_modelEnderCrystalNoBase = new ReflectorField(RenderEnderCrystal, ModelBase.class, 1);
-    public static ReflectorClass ModelEnderMite = new ReflectorClass(ModelEnderMite.class);
-    public static ReflectorField ModelEnderMite_bodyParts = new ReflectorField(ModelEnderMite, ModelRenderer[].class);
-    public static ReflectorClass ModelGhast = new ReflectorClass(ModelGhast.class);
-    public static ReflectorField ModelGhast_body = new ReflectorField(ModelGhast, ModelRenderer.class);
-    public static ReflectorField ModelGhast_tentacles = new ReflectorField(ModelGhast, ModelRenderer[].class);
-    public static ReflectorClass ModelGuardian = new ReflectorClass(ModelGuardian.class);
-    public static ReflectorField ModelGuardian_body = new ReflectorField(ModelGuardian, ModelRenderer.class, 0);
-    public static ReflectorField ModelGuardian_eye = new ReflectorField(ModelGuardian, ModelRenderer.class, 1);
-    public static ReflectorField ModelGuardian_spines = new ReflectorField(ModelGuardian, ModelRenderer[].class, 0);
-    public static ReflectorField ModelGuardian_tail = new ReflectorField(ModelGuardian, ModelRenderer[].class, 1);
-    public static ReflectorClass ModelDragonHead = new ReflectorClass(ModelDragonHead.class);
-    public static ReflectorField ModelDragonHead_head = new ReflectorField(ModelDragonHead, ModelRenderer.class, 0);
-    public static ReflectorField ModelDragonHead_jaw = new ReflectorField(ModelDragonHead, ModelRenderer.class, 1);
-    public static ReflectorClass ModelHorse = new ReflectorClass(ModelHorse.class);
-    public static ReflectorFields ModelHorse_ModelRenderers = new ReflectorFields(ModelHorse, ModelRenderer.class, 39);
-    public static ReflectorClass RenderLeashKnot = new ReflectorClass(RenderLeashKnot.class);
-    public static ReflectorField RenderLeashKnot_leashKnotModel = new ReflectorField(RenderLeashKnot, ModelLeashKnot.class);
-    public static ReflectorClass ModelMagmaCube = new ReflectorClass(ModelMagmaCube.class);
-    public static ReflectorField ModelMagmaCube_core = new ReflectorField(ModelMagmaCube, ModelRenderer.class);
-    public static ReflectorField ModelMagmaCube_segments = new ReflectorField(ModelMagmaCube, ModelRenderer[].class);
-    public static ReflectorClass ModelOcelot = new ReflectorClass(ModelOcelot.class);
-    public static ReflectorFields ModelOcelot_ModelRenderers = new ReflectorFields(ModelOcelot, ModelRenderer.class, 8);
-    public static ReflectorClass ModelRabbit = new ReflectorClass(ModelRabbit.class);
-    public static ReflectorFields ModelRabbit_renderers = new ReflectorFields(ModelRabbit, ModelRenderer.class, 12);
-    public static ReflectorClass ModelShulker = new ReflectorClass(ModelShulker.class);
-    public static ReflectorField ModelShulker_base = new ReflectorField(ModelShulker, ModelRenderer.class, 0);
-    public static ReflectorField ModelShulker_lid = new ReflectorField(ModelShulker, ModelRenderer.class, 1);
-    public static ReflectorClass ModelSilverfish = new ReflectorClass(ModelSilverfish.class);
-    public static ReflectorField ModelSilverfish_bodyParts = new ReflectorField(ModelSilverfish, ModelRenderer[].class, 0);
-    public static ReflectorField ModelSilverfish_wingParts = new ReflectorField(ModelSilverfish, ModelRenderer[].class, 1);
-    public static ReflectorClass ModelSlime = new ReflectorClass(ModelSlime.class);
-    public static ReflectorFields ModelSlime_ModelRenderers = new ReflectorFields(ModelSlime, ModelRenderer.class, 4);
-    public static ReflectorClass ModelSquid = new ReflectorClass(ModelSquid.class);
-    public static ReflectorField ModelSquid_body = new ReflectorField(ModelSquid, ModelRenderer.class);
-    public static ReflectorField ModelSquid_tentacles = new ReflectorField(ModelSquid, ModelRenderer[].class);
-    public static ReflectorClass ModelWitch = new ReflectorClass(ModelWitch.class);
-    public static ReflectorField ModelWitch_mole = new ReflectorField(ModelWitch, ModelRenderer.class, 0);
-    public static ReflectorField ModelWitch_hat = new ReflectorField(ModelWitch, ModelRenderer.class, 1);
-    public static ReflectorClass ModelWither = new ReflectorClass(ModelWither.class);
-    public static ReflectorField ModelWither_bodyParts = new ReflectorField(ModelWither, ModelRenderer[].class, 0);
-    public static ReflectorField ModelWither_heads = new ReflectorField(ModelWither, ModelRenderer[].class, 1);
-    public static ReflectorClass ModelWolf = new ReflectorClass(ModelWolf.class);
-    public static ReflectorField ModelWolf_tail = new ReflectorField(ModelWolf, ModelRenderer.class, 6);
-    public static ReflectorField ModelWolf_mane = new ReflectorField(ModelWolf, ModelRenderer.class, 7);
-    public static ReflectorClass OptiFineClassTransformer = new ReflectorClass("optifine.OptiFineClassTransformer");
-    public static ReflectorField OptiFineClassTransformer_instance = new ReflectorField(OptiFineClassTransformer, "instance");
-    public static ReflectorMethod OptiFineClassTransformer_getOptiFineResource = new ReflectorMethod(OptiFineClassTransformer, "getOptiFineResource");
-    public static ReflectorClass RenderBoat = new ReflectorClass(RenderBoat.class);
-    public static ReflectorField RenderBoat_modelBoat = new ReflectorField(RenderBoat, ModelBase.class);
-    public static ReflectorClass RenderMinecart = new ReflectorClass(RenderMinecart.class);
-    public static ReflectorField RenderMinecart_modelMinecart = new ReflectorField(RenderMinecart, ModelBase.class);
-    public static ReflectorClass RenderShulkerBullet = new ReflectorClass(RenderShulkerBullet.class);
-    public static ReflectorField RenderShulkerBullet_model = new ReflectorField(RenderShulkerBullet, ModelShulkerBullet.class);
-    public static ReflectorClass RenderWitherSkull = new ReflectorClass(RenderWitherSkull.class);
-    public static ReflectorField RenderWitherSkull_model = new ReflectorField(RenderWitherSkull, ModelSkeletonHead.class);
-    public static ReflectorClass TileEntityBannerRenderer = new ReflectorClass(TileEntityBannerRenderer.class);
-    public static ReflectorField TileEntityBannerRenderer_bannerModel = new ReflectorField(TileEntityBannerRenderer, ModelBanner.class);
-    public static ReflectorClass TileEntityChestRenderer = new ReflectorClass(TileEntityChestRenderer.class);
-    public static ReflectorField TileEntityChestRenderer_simpleChest = new ReflectorField(TileEntityChestRenderer, ModelChest.class, 0);
-    public static ReflectorField TileEntityChestRenderer_largeChest = new ReflectorField(TileEntityChestRenderer, ModelChest.class, 1);
-    public static ReflectorClass TileEntityEnchantmentTableRenderer = new ReflectorClass(TileEntityEnchantmentTableRenderer.class);
-    public static ReflectorField TileEntityEnchantmentTableRenderer_modelBook = new ReflectorField(TileEntityEnchantmentTableRenderer, ModelBook.class);
-    public static ReflectorClass TileEntityEnderChestRenderer = new ReflectorClass(TileEntityEnderChestRenderer.class);
-    public static ReflectorField TileEntityEnderChestRenderer_modelChest = new ReflectorField(TileEntityEnderChestRenderer, ModelChest.class);
-    public static ReflectorClass TileEntitySignRenderer = new ReflectorClass(TileEntitySignRenderer.class);
-    public static ReflectorField TileEntitySignRenderer_model = new ReflectorField(TileEntitySignRenderer, ModelSign.class);
-    public static ReflectorClass TileEntitySkullRenderer = new ReflectorClass(TileEntitySkullRenderer.class);
-    public static ReflectorField TileEntitySkullRenderer_dragonHead = new ReflectorField(TileEntitySkullRenderer, ModelDragonHead.class, 0);
-    public static ReflectorField TileEntitySkullRenderer_skeletonHead = new ReflectorField(TileEntitySkullRenderer, ModelSkeletonHead.class, 0);
-    public static ReflectorField TileEntitySkullRenderer_humanoidHead = new ReflectorField(TileEntitySkullRenderer, ModelSkeletonHead.class, 1);
-
-    public static void callVoid(ReflectorMethod p_callVoid_0_, Object... p_callVoid_1_)
-    {
-        try
-        {
-            Method method = p_callVoid_0_.getTargetMethod();
-
-            if (method == null)
-            {
-                return;
-            }
-
-            method.invoke((Object)null, p_callVoid_1_);
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, (Object)null, p_callVoid_0_, p_callVoid_1_);
-        }
-    }
-
-    public static boolean callBoolean(ReflectorMethod p_callBoolean_0_, Object... p_callBoolean_1_)
-    {
-        try
-        {
-            Method method = p_callBoolean_0_.getTargetMethod();
-
-            if (method == null)
-            {
-                return false;
-            }
-            else
-            {
-                Boolean obool = (Boolean)method.invoke((Object)null, p_callBoolean_1_);
-                return obool.booleanValue();
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, (Object)null, p_callBoolean_0_, p_callBoolean_1_);
-            return false;
-        }
-    }
-
-    public static int callInt(ReflectorMethod p_callInt_0_, Object... p_callInt_1_)
-    {
-        try
-        {
-            Method method = p_callInt_0_.getTargetMethod();
-
-            if (method == null)
-            {
-                return 0;
-            }
-            else
-            {
-                Integer integer = (Integer)method.invoke((Object)null, p_callInt_1_);
-                return integer.intValue();
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, (Object)null, p_callInt_0_, p_callInt_1_);
-            return 0;
-        }
-    }
-
-    public static float callFloat(ReflectorMethod p_callFloat_0_, Object... p_callFloat_1_)
-    {
-        try
-        {
-            Method method = p_callFloat_0_.getTargetMethod();
-
-            if (method == null)
-            {
-                return 0.0F;
-            }
-            else
-            {
-                Float f = (Float)method.invoke((Object)null, p_callFloat_1_);
-                return f.floatValue();
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, (Object)null, p_callFloat_0_, p_callFloat_1_);
-            return 0.0F;
-        }
-    }
-
-    public static double callDouble(ReflectorMethod p_callDouble_0_, Object... p_callDouble_1_)
-    {
-        try
-        {
-            Method method = p_callDouble_0_.getTargetMethod();
-
-            if (method == null)
-            {
-                return 0.0D;
-            }
-            else
-            {
-                Double d0 = (Double)method.invoke((Object)null, p_callDouble_1_);
-                return d0.doubleValue();
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, (Object)null, p_callDouble_0_, p_callDouble_1_);
-            return 0.0D;
-        }
-    }
-
-    public static String callString(ReflectorMethod p_callString_0_, Object... p_callString_1_)
-    {
-        try
-        {
-            Method method = p_callString_0_.getTargetMethod();
-
-            if (method == null)
-            {
-                return null;
-            }
-            else
-            {
-                String s = (String)method.invoke((Object)null, p_callString_1_);
-                return s;
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, (Object)null, p_callString_0_, p_callString_1_);
-            return null;
-        }
-    }
-
-    public static Object call(ReflectorMethod p_call_0_, Object... p_call_1_)
-    {
-        try
-        {
-            Method method = p_call_0_.getTargetMethod();
-
-            if (method == null)
-            {
-                return null;
-            }
-            else
-            {
-                Object object = method.invoke((Object)null, p_call_1_);
-                return object;
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, (Object)null, p_call_0_, p_call_1_);
-            return null;
-        }
-    }
-
-    public static void callVoid(Object p_callVoid_0_, ReflectorMethod p_callVoid_1_, Object... p_callVoid_2_)
-    {
-        try
-        {
-            if (p_callVoid_0_ == null)
-            {
-                return;
-            }
-
-            Method method = p_callVoid_1_.getTargetMethod();
-
-            if (method == null)
-            {
-                return;
-            }
-
-            method.invoke(p_callVoid_0_, p_callVoid_2_);
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, p_callVoid_0_, p_callVoid_1_, p_callVoid_2_);
-        }
-    }
-
-    public static boolean callBoolean(Object p_callBoolean_0_, ReflectorMethod p_callBoolean_1_, Object... p_callBoolean_2_)
-    {
-        try
-        {
-            Method method = p_callBoolean_1_.getTargetMethod();
-
-            if (method == null)
-            {
-                return false;
-            }
-            else
-            {
-                Boolean obool = (Boolean)method.invoke(p_callBoolean_0_, p_callBoolean_2_);
-                return obool.booleanValue();
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, p_callBoolean_0_, p_callBoolean_1_, p_callBoolean_2_);
-            return false;
-        }
-    }
-
-    public static int callInt(Object p_callInt_0_, ReflectorMethod p_callInt_1_, Object... p_callInt_2_)
-    {
-        try
-        {
-            Method method = p_callInt_1_.getTargetMethod();
-
-            if (method == null)
-            {
-                return 0;
-            }
-            else
-            {
-                Integer integer = (Integer)method.invoke(p_callInt_0_, p_callInt_2_);
-                return integer.intValue();
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, p_callInt_0_, p_callInt_1_, p_callInt_2_);
-            return 0;
-        }
-    }
-
-    public static float callFloat(Object p_callFloat_0_, ReflectorMethod p_callFloat_1_, Object... p_callFloat_2_)
-    {
-        try
-        {
-            Method method = p_callFloat_1_.getTargetMethod();
-
-            if (method == null)
-            {
-                return 0.0F;
-            }
-            else
-            {
-                Float f = (Float)method.invoke(p_callFloat_0_, p_callFloat_2_);
-                return f.floatValue();
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, p_callFloat_0_, p_callFloat_1_, p_callFloat_2_);
-            return 0.0F;
-        }
-    }
-
-    public static double callDouble(Object p_callDouble_0_, ReflectorMethod p_callDouble_1_, Object... p_callDouble_2_)
-    {
-        try
-        {
-            Method method = p_callDouble_1_.getTargetMethod();
-
-            if (method == null)
-            {
-                return 0.0D;
-            }
-            else
-            {
-                Double d0 = (Double)method.invoke(p_callDouble_0_, p_callDouble_2_);
-                return d0.doubleValue();
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, p_callDouble_0_, p_callDouble_1_, p_callDouble_2_);
-            return 0.0D;
-        }
-    }
-
-    public static String callString(Object p_callString_0_, ReflectorMethod p_callString_1_, Object... p_callString_2_)
-    {
-        try
-        {
-            Method method = p_callString_1_.getTargetMethod();
-
-            if (method == null)
-            {
-                return null;
-            }
-            else
-            {
-                String s = (String)method.invoke(p_callString_0_, p_callString_2_);
-                return s;
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, p_callString_0_, p_callString_1_, p_callString_2_);
-            return null;
-        }
-    }
-
-    public static Object call(Object p_call_0_, ReflectorMethod p_call_1_, Object... p_call_2_)
-    {
-        try
-        {
-            Method method = p_call_1_.getTargetMethod();
-
-            if (method == null)
-            {
-                return null;
-            }
-            else
-            {
-                Object object = method.invoke(p_call_0_, p_call_2_);
-                return object;
-            }
-        }
-        catch (Throwable throwable)
-        {
-            handleException(throwable, p_call_0_, p_call_1_, p_call_2_);
-            return null;
-        }
-    }
-
-    public static Object getFieldValue(ReflectorField p_getFieldValue_0_)
-    {
-        return getFieldValue((Object)null, p_getFieldValue_0_);
-    }
-
-    public static Object getFieldValue(Object p_getFieldValue_0_, ReflectorField p_getFieldValue_1_)
-    {
-        try
-        {
-            Field field = p_getFieldValue_1_.getTargetField();
-
-            if (field == null)
-            {
-                return null;
-            }
-            else
-            {
-                Object object = field.get(p_getFieldValue_0_);
-                return object;
-            }
-        }
-        catch (Throwable throwable)
-        {
-            throwable.printStackTrace();
-            return null;
-        }
-    }
-
-    public static Object getFieldValue(ReflectorFields p_getFieldValue_0_, int p_getFieldValue_1_)
-    {
-        ReflectorField reflectorfield = p_getFieldValue_0_.getReflectorField(p_getFieldValue_1_);
-        return reflectorfield == null ? null : getFieldValue(reflectorfield);
-    }
-
-    public static Object getFieldValue(Object p_getFieldValue_0_, ReflectorFields p_getFieldValue_1_, int p_getFieldValue_2_)
-    {
-        ReflectorField reflectorfield = p_getFieldValue_1_.getReflectorField(p_getFieldValue_2_);
-        return reflectorfield == null ? null : getFieldValue(p_getFieldValue_0_, reflectorfield);
-    }
-
-    public static float getFieldValueFloat(Object p_getFieldValueFloat_0_, ReflectorField p_getFieldValueFloat_1_, float p_getFieldValueFloat_2_)
-    {
-        Object object = getFieldValue(p_getFieldValueFloat_0_, p_getFieldValueFloat_1_);
-
-        if (!(object instanceof Float))
-        {
-            return p_getFieldValueFloat_2_;
-        }
-        else
-        {
-            Float f = (Float)object;
-            return f.floatValue();
-        }
-    }
-
-    public static boolean setFieldValue(ReflectorField p_setFieldValue_0_, Object p_setFieldValue_1_)
-    {
-        return setFieldValue((Object)null, p_setFieldValue_0_, p_setFieldValue_1_);
-    }
-
-    public static boolean setFieldValue(Object p_setFieldValue_0_, ReflectorField p_setFieldValue_1_, Object p_setFieldValue_2_)
-    {
-        try
-        {
-            Field field = p_setFieldValue_1_.getTargetField();
-
-            if (field == null)
-            {
-                return false;
-            }
-            else
-            {
-                field.set(p_setFieldValue_0_, p_setFieldValue_2_);
-                return true;
-            }
-        }
-        catch (Throwable throwable)
-        {
-            throwable.printStackTrace();
-            return false;
-        }
-    }
-
-    public static boolean postForgeBusEvent(ReflectorConstructor p_postForgeBusEvent_0_, Object... p_postForgeBusEvent_1_)
-    {
-        Object object = newInstance(p_postForgeBusEvent_0_, p_postForgeBusEvent_1_);
-        return object == null ? false : postForgeBusEvent(object);
-    }
-
-    public static boolean postForgeBusEvent(Object p_postForgeBusEvent_0_)
-    {
-        if (p_postForgeBusEvent_0_ == null)
-        {
-            return false;
-        }
-        else
-        {
-            Object object = getFieldValue(MinecraftForge_EVENT_BUS);
-
-            if (object == null)
-            {
-                return false;
-            }
-            else
-            {
-                Object object1 = call(object, EventBus_post, new Object[] {p_postForgeBusEvent_0_});
-
-                if (!(object1 instanceof Boolean))
-                {
-                    return false;
-                }
-                else
-                {
-                    Boolean obool = (Boolean)object1;
-                    return obool.booleanValue();
-                }
-            }
-        }
-    }
-
-    public static Object newInstance(ReflectorConstructor p_newInstance_0_, Object... p_newInstance_1_)
-    {
-        Constructor constructor = p_newInstance_0_.getTargetConstructor();
-
-        if (constructor == null)
-        {
-            return null;
-        }
-        else
-        {
-            try
-            {
-                Object object = constructor.newInstance(p_newInstance_1_);
-                return object;
-            }
-            catch (Throwable throwable)
-            {
-                handleException(throwable, p_newInstance_0_, p_newInstance_1_);
-                return null;
-            }
-        }
-    }
-
-    public static boolean matchesTypes(Class[] p_matchesTypes_0_, Class[] p_matchesTypes_1_)
-    {
-        if (p_matchesTypes_0_.length != p_matchesTypes_1_.length)
-        {
-            return false;
-        }
-        else
-        {
-            for (int i = 0; i < p_matchesTypes_1_.length; ++i)
-            {
-                Class oclass = p_matchesTypes_0_[i];
-                Class oclass1 = p_matchesTypes_1_[i];
-
-                if (oclass != oclass1)
-                {
-                    return false;
-                }
-            }
-
-            return true;
-        }
-    }
-
-    private static void dbgCall(boolean p_dbgCall_0_, String p_dbgCall_1_, ReflectorMethod p_dbgCall_2_, Object[] p_dbgCall_3_, Object p_dbgCall_4_)
-    {
-        String s = p_dbgCall_2_.getTargetMethod().getDeclaringClass().getName();
-        String s1 = p_dbgCall_2_.getTargetMethod().getName();
-        String s2 = "";
-
-        if (p_dbgCall_0_)
-        {
-            s2 = " static";
-        }
-
-        Config.dbg(p_dbgCall_1_ + s2 + " " + s + "." + s1 + "(" + Config.arrayToString(p_dbgCall_3_) + ") => " + p_dbgCall_4_);
-    }
-
-    private static void dbgCallVoid(boolean p_dbgCallVoid_0_, String p_dbgCallVoid_1_, ReflectorMethod p_dbgCallVoid_2_, Object[] p_dbgCallVoid_3_)
-    {
-        String s = p_dbgCallVoid_2_.getTargetMethod().getDeclaringClass().getName();
-        String s1 = p_dbgCallVoid_2_.getTargetMethod().getName();
-        String s2 = "";
-
-        if (p_dbgCallVoid_0_)
-        {
-            s2 = " static";
-        }
-
-        Config.dbg(p_dbgCallVoid_1_ + s2 + " " + s + "." + s1 + "(" + Config.arrayToString(p_dbgCallVoid_3_) + ")");
-    }
-
-    private static void dbgFieldValue(boolean p_dbgFieldValue_0_, String p_dbgFieldValue_1_, ReflectorField p_dbgFieldValue_2_, Object p_dbgFieldValue_3_)
-    {
-        String s = p_dbgFieldValue_2_.getTargetField().getDeclaringClass().getName();
-        String s1 = p_dbgFieldValue_2_.getTargetField().getName();
-        String s2 = "";
-
-        if (p_dbgFieldValue_0_)
-        {
-            s2 = " static";
-        }
-
-        Config.dbg(p_dbgFieldValue_1_ + s2 + " " + s + "." + s1 + " => " + p_dbgFieldValue_3_);
-    }
-
-    private static void handleException(Throwable p_handleException_0_, Object p_handleException_1_, ReflectorMethod p_handleException_2_, Object[] p_handleException_3_)
-    {
-        if (p_handleException_0_ instanceof InvocationTargetException)
-        {
-            Throwable throwable = p_handleException_0_.getCause();
-
-            if (throwable instanceof RuntimeException)
-            {
-                RuntimeException runtimeexception = (RuntimeException)throwable;
-                throw runtimeexception;
-            }
-            else
-            {
-                p_handleException_0_.printStackTrace();
-            }
-        }
-        else
-        {
-            if (p_handleException_0_ instanceof IllegalArgumentException)
-            {
-                Config.warn("*** IllegalArgumentException ***");
-                Config.warn("Method: " + p_handleException_2_.getTargetMethod());
-                Config.warn("Object: " + p_handleException_1_);
-                Config.warn("Parameter classes: " + Config.arrayToString(getClasses(p_handleException_3_)));
-                Config.warn("Parameters: " + Config.arrayToString(p_handleException_3_));
-            }
-
-            Config.warn("*** Exception outside of method ***");
-            Config.warn("Method deactivated: " + p_handleException_2_.getTargetMethod());
-            p_handleException_2_.deactivate();
-            p_handleException_0_.printStackTrace();
-        }
-    }
-
-    private static void handleException(Throwable p_handleException_0_, ReflectorConstructor p_handleException_1_, Object[] p_handleException_2_)
-    {
-        if (p_handleException_0_ instanceof InvocationTargetException)
-        {
-            p_handleException_0_.printStackTrace();
-        }
-        else
-        {
-            if (p_handleException_0_ instanceof IllegalArgumentException)
-            {
-                Config.warn("*** IllegalArgumentException ***");
-                Config.warn("Constructor: " + p_handleException_1_.getTargetConstructor());
-                Config.warn("Parameter classes: " + Config.arrayToString(getClasses(p_handleException_2_)));
-                Config.warn("Parameters: " + Config.arrayToString(p_handleException_2_));
-            }
-
-            Config.warn("*** Exception outside of constructor ***");
-            Config.warn("Constructor deactivated: " + p_handleException_1_.getTargetConstructor());
-            p_handleException_1_.deactivate();
-            p_handleException_0_.printStackTrace();
-        }
-    }
-
-    private static Object[] getClasses(Object[] p_getClasses_0_)
-    {
-        if (p_getClasses_0_ == null)
-        {
-            return new Class[0];
-        }
-        else
-        {
-            Class[] aclass = new Class[p_getClasses_0_.length];
-
-            for (int i = 0; i < aclass.length; ++i)
-            {
-                Object object = p_getClasses_0_[i];
-
-                if (object != null)
-                {
-                    aclass[i] = object.getClass();
-                }
-            }
-
-            return aclass;
-        }
-    }
-
-    private static ReflectorField[] getReflectorFields(ReflectorClass p_getReflectorFields_0_, Class p_getReflectorFields_1_, int p_getReflectorFields_2_)
-    {
-        ReflectorField[] areflectorfield = new ReflectorField[p_getReflectorFields_2_];
-
-        for (int i = 0; i < areflectorfield.length; ++i)
-        {
-            areflectorfield[i] = new ReflectorField(p_getReflectorFields_0_, p_getReflectorFields_1_, i);
-        }
-
-        return areflectorfield;
-    }
-
-    private static boolean logEntry(String p_logEntry_0_)
-    {
-        Config.dbg(p_logEntry_0_);
-        return true;
-    }
+	public static ReflectorClass RenderingRegistry = new ReflectorClass("net.minecraftforge.fml.client.registry.RenderingRegistry");
+	public static ReflectorMethod RenderingRegistry_loadEntityRenderers = new ReflectorMethod(RenderingRegistry, "loadEntityRenderers", new Class[] {RenderManager.class, Map.class});
+	public static ReflectorClass RenderItemInFrameEvent = new ReflectorClass("net.minecraftforge.client.event.RenderItemInFrameEvent");
+	public static ReflectorConstructor RenderItemInFrameEvent_Constructor = new ReflectorConstructor(RenderItemInFrameEvent, new Class[] {EntityItemFrame.class, RenderItemFrame.class});
+	public static ReflectorClass RenderLivingEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Pre");
+	public static ReflectorConstructor RenderLivingEvent_Pre_Constructor = new ReflectorConstructor(RenderLivingEvent_Pre, new Class[] {EntityLivingBase.class, RenderLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE});
+	public static ReflectorClass RenderLivingEvent_Post = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Post");
+	public static ReflectorConstructor RenderLivingEvent_Post_Constructor = new ReflectorConstructor(RenderLivingEvent_Post, new Class[] {EntityLivingBase.class, RenderLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE});
+	public static ReflectorClass RenderLivingEvent_Specials_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Specials$Pre");
+	public static ReflectorConstructor RenderLivingEvent_Specials_Pre_Constructor = new ReflectorConstructor(RenderLivingEvent_Specials_Pre, new Class[] {EntityLivingBase.class, RenderLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE});
+	public static ReflectorClass RenderLivingEvent_Specials_Post = new ReflectorClass("net.minecraftforge.client.event.RenderLivingEvent$Specials$Post");
+	public static ReflectorConstructor RenderLivingEvent_Specials_Post_Constructor = new ReflectorConstructor(RenderLivingEvent_Specials_Post, new Class[] {EntityLivingBase.class, RenderLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE});
+	public static ReflectorClass ScreenshotEvent = new ReflectorClass("net.minecraftforge.client.event.ScreenshotEvent");
+	public static ReflectorMethod ScreenshotEvent_getCancelMessage = new ReflectorMethod(ScreenshotEvent, "getCancelMessage");
+	public static ReflectorMethod ScreenshotEvent_getScreenshotFile = new ReflectorMethod(ScreenshotEvent, "getScreenshotFile");
+	public static ReflectorMethod ScreenshotEvent_getResultMessage = new ReflectorMethod(ScreenshotEvent, "getResultMessage");
+	public static ReflectorClass SplashScreen = new ReflectorClass("net.minecraftforge.fml.client.SplashProgress");
+	public static ReflectorClass WorldEvent_Load = new ReflectorClass("net.minecraftforge.event.world.WorldEvent$Load");
+	public static ReflectorConstructor WorldEvent_Load_Constructor = new ReflectorConstructor(WorldEvent_Load, new Class[] {World.class});
+	public static ReflectorClass ChunkProviderClient = new ReflectorClass(net.minecraft.client.multiplayer.ChunkProviderClient.class);
+	public static ReflectorField ChunkProviderClient_chunkMapping = new ReflectorField(ChunkProviderClient, Long2ObjectMap.class);
+	public static ReflectorClass GuiMainMenu = new ReflectorClass(net.minecraft.client.gui.GuiMainMenu.class);
+	public static ReflectorField GuiMainMenu_splashText = new ReflectorField(GuiMainMenu, String.class);
+	public static ReflectorClass Minecraft = new ReflectorClass(Minecraft.class);
+	public static ReflectorField Minecraft_defaultResourcePack = new ReflectorField(Minecraft, DefaultResourcePack.class);
+	public static ReflectorField Minecraft_actionKeyF3 = new ReflectorField(new FieldLocatorActionKeyF3());
+	public static ReflectorClass ModelHumanoidHead = new ReflectorClass(ModelHumanoidHead.class);
+	public static ReflectorField ModelHumanoidHead_head = new ReflectorField(ModelHumanoidHead, ModelRenderer.class);
+	public static ReflectorClass ModelBat = new ReflectorClass(ModelBat.class);
+	public static ReflectorFields ModelBat_ModelRenderers = new ReflectorFields(ModelBat, ModelRenderer.class, 6);
+	public static ReflectorClass ModelBlaze = new ReflectorClass(ModelBlaze.class);
+	public static ReflectorField ModelBlaze_blazeHead = new ReflectorField(ModelBlaze, ModelRenderer.class);
+	public static ReflectorField ModelBlaze_blazeSticks = new ReflectorField(ModelBlaze, ModelRenderer[].class);
+	public static ReflectorClass ModelDragon = new ReflectorClass(ModelDragon.class);
+	public static ReflectorFields ModelDragon_ModelRenderers = new ReflectorFields(ModelDragon, ModelRenderer.class, 12);
+	public static ReflectorClass ModelEnderCrystal = new ReflectorClass(ModelEnderCrystal.class);
+	public static ReflectorFields ModelEnderCrystal_ModelRenderers = new ReflectorFields(ModelEnderCrystal, ModelRenderer.class, 3);
+	public static ReflectorClass RenderEnderCrystal = new ReflectorClass(net.minecraft.client.renderer.tileentity.RenderEnderCrystal.class);
+	public static ReflectorField RenderEnderCrystal_modelEnderCrystal = new ReflectorField(RenderEnderCrystal, ModelBase.class, 0);
+	public static ReflectorField RenderEnderCrystal_modelEnderCrystalNoBase = new ReflectorField(RenderEnderCrystal, ModelBase.class, 1);
+	public static ReflectorClass ModelEnderMite = new ReflectorClass(ModelEnderMite.class);
+	public static ReflectorField ModelEnderMite_bodyParts = new ReflectorField(ModelEnderMite, ModelRenderer[].class);
+	public static ReflectorClass ModelGhast = new ReflectorClass(ModelGhast.class);
+	public static ReflectorField ModelGhast_body = new ReflectorField(ModelGhast, ModelRenderer.class);
+	public static ReflectorField ModelGhast_tentacles = new ReflectorField(ModelGhast, ModelRenderer[].class);
+	public static ReflectorClass ModelGuardian = new ReflectorClass(ModelGuardian.class);
+	public static ReflectorField ModelGuardian_body = new ReflectorField(ModelGuardian, ModelRenderer.class, 0);
+	public static ReflectorField ModelGuardian_eye = new ReflectorField(ModelGuardian, ModelRenderer.class, 1);
+	public static ReflectorField ModelGuardian_spines = new ReflectorField(ModelGuardian, ModelRenderer[].class, 0);
+	public static ReflectorField ModelGuardian_tail = new ReflectorField(ModelGuardian, ModelRenderer[].class, 1);
+	public static ReflectorClass ModelDragonHead = new ReflectorClass(ModelDragonHead.class);
+	public static ReflectorField ModelDragonHead_head = new ReflectorField(ModelDragonHead, ModelRenderer.class, 0);
+	public static ReflectorField ModelDragonHead_jaw = new ReflectorField(ModelDragonHead, ModelRenderer.class, 1);
+	public static ReflectorClass ModelHorse = new ReflectorClass(ModelHorse.class);
+	public static ReflectorFields ModelHorse_ModelRenderers = new ReflectorFields(ModelHorse, ModelRenderer.class, 39);
+	public static ReflectorClass RenderLeashKnot = new ReflectorClass(net.minecraft.client.renderer.entity.RenderLeashKnot.class);
+	public static ReflectorField RenderLeashKnot_leashKnotModel = new ReflectorField(RenderLeashKnot, ModelLeashKnot.class);
+	public static ReflectorClass ModelMagmaCube = new ReflectorClass(ModelMagmaCube.class);
+	public static ReflectorField ModelMagmaCube_core = new ReflectorField(ModelMagmaCube, ModelRenderer.class);
+	public static ReflectorField ModelMagmaCube_segments = new ReflectorField(ModelMagmaCube, ModelRenderer[].class);
+	public static ReflectorClass ModelOcelot = new ReflectorClass(ModelOcelot.class);
+	public static ReflectorFields ModelOcelot_ModelRenderers = new ReflectorFields(ModelOcelot, ModelRenderer.class, 8);
+	public static ReflectorClass ModelRabbit = new ReflectorClass(ModelRabbit.class);
+	public static ReflectorFields ModelRabbit_renderers = new ReflectorFields(ModelRabbit, ModelRenderer.class, 12);
+	public static ReflectorClass ModelShulker = new ReflectorClass(ModelShulker.class);
+	public static ReflectorField ModelShulker_base = new ReflectorField(ModelShulker, ModelRenderer.class, 0);
+	public static ReflectorField ModelShulker_lid = new ReflectorField(ModelShulker, ModelRenderer.class, 1);
+	public static ReflectorClass ModelSilverfish = new ReflectorClass(ModelSilverfish.class);
+	public static ReflectorField ModelSilverfish_bodyParts = new ReflectorField(ModelSilverfish, ModelRenderer[].class, 0);
+	public static ReflectorField ModelSilverfish_wingParts = new ReflectorField(ModelSilverfish, ModelRenderer[].class, 1);
+	public static ReflectorClass ModelSlime = new ReflectorClass(ModelSlime.class);
+	public static ReflectorFields ModelSlime_ModelRenderers = new ReflectorFields(ModelSlime, ModelRenderer.class, 4);
+	public static ReflectorClass ModelSquid = new ReflectorClass(ModelSquid.class);
+	public static ReflectorField ModelSquid_body = new ReflectorField(ModelSquid, ModelRenderer.class);
+	public static ReflectorField ModelSquid_tentacles = new ReflectorField(ModelSquid, ModelRenderer[].class);
+	public static ReflectorClass ModelWitch = new ReflectorClass(ModelWitch.class);
+	public static ReflectorField ModelWitch_mole = new ReflectorField(ModelWitch, ModelRenderer.class, 0);
+	public static ReflectorField ModelWitch_hat = new ReflectorField(ModelWitch, ModelRenderer.class, 1);
+	public static ReflectorClass ModelWither = new ReflectorClass(ModelWither.class);
+	public static ReflectorField ModelWither_bodyParts = new ReflectorField(ModelWither, ModelRenderer[].class, 0);
+	public static ReflectorField ModelWither_heads = new ReflectorField(ModelWither, ModelRenderer[].class, 1);
+	public static ReflectorClass ModelWolf = new ReflectorClass(ModelWolf.class);
+	public static ReflectorField ModelWolf_tail = new ReflectorField(ModelWolf, ModelRenderer.class, 6);
+	public static ReflectorField ModelWolf_mane = new ReflectorField(ModelWolf, ModelRenderer.class, 7);
+	public static ReflectorClass OptiFineClassTransformer = new ReflectorClass("optifine.OptiFineClassTransformer");
+	public static ReflectorField OptiFineClassTransformer_instance = new ReflectorField(OptiFineClassTransformer, "instance");
+	public static ReflectorMethod OptiFineClassTransformer_getOptiFineResource = new ReflectorMethod(OptiFineClassTransformer, "getOptiFineResource");
+	public static ReflectorClass RenderBoat = new ReflectorClass(net.minecraft.client.renderer.entity.RenderBoat.class);
+	public static ReflectorField RenderBoat_modelBoat = new ReflectorField(RenderBoat, ModelBase.class);
+	public static ReflectorClass RenderMinecart = new ReflectorClass(net.minecraft.client.renderer.entity.RenderMinecart.class);
+	public static ReflectorField RenderMinecart_modelMinecart = new ReflectorField(RenderMinecart, ModelBase.class);
+	public static ReflectorClass RenderShulkerBullet = new ReflectorClass(net.minecraft.client.renderer.entity.RenderShulkerBullet.class);
+	public static ReflectorField RenderShulkerBullet_model = new ReflectorField(RenderShulkerBullet, ModelShulkerBullet.class);
+	public static ReflectorClass RenderWitherSkull = new ReflectorClass(net.minecraft.client.renderer.tileentity.RenderWitherSkull.class);
+	public static ReflectorField RenderWitherSkull_model = new ReflectorField(RenderWitherSkull, ModelSkeletonHead.class);
+	public static ReflectorClass TileEntityBannerRenderer = new ReflectorClass(net.minecraft.client.renderer.tileentity.TileEntityBannerRenderer.class);
+	public static ReflectorField TileEntityBannerRenderer_bannerModel = new ReflectorField(TileEntityBannerRenderer, ModelBanner.class);
+	public static ReflectorClass TileEntityChestRenderer = new ReflectorClass(net.minecraft.client.renderer.tileentity.TileEntityBannerRenderer.class);
+	public static ReflectorField TileEntityChestRenderer_simpleChest = new ReflectorField(TileEntityChestRenderer, ModelChest.class, 0);
+	public static ReflectorField TileEntityChestRenderer_largeChest = new ReflectorField(TileEntityChestRenderer, ModelChest.class, 1);
+	public static ReflectorClass TileEntityEnchantmentTableRenderer = new ReflectorClass(net.minecraft.client.renderer.tileentity.TileEntityEnchantmentTableRenderer.class);
+	public static ReflectorField TileEntityEnchantmentTableRenderer_modelBook = new ReflectorField(TileEntityEnchantmentTableRenderer, ModelBook.class);
+	public static ReflectorClass TileEntityEnderChestRenderer = new ReflectorClass(net.minecraft.client.renderer.tileentity.TileEntityChestRenderer.class);
+	public static ReflectorField TileEntityEnderChestRenderer_modelChest = new ReflectorField(TileEntityEnderChestRenderer, ModelChest.class);
+	public static ReflectorClass TileEntitySignRenderer = new ReflectorClass(net.minecraft.client.renderer.tileentity.TileEntitySignRenderer.class);
+	public static ReflectorField TileEntitySignRenderer_model = new ReflectorField(TileEntitySignRenderer, ModelSign.class);
+	public static ReflectorClass TileEntitySkullRenderer = new ReflectorClass(net.minecraft.client.renderer.tileentity.TileEntitySkullRenderer.class);
+	public static ReflectorField TileEntitySkullRenderer_dragonHead = new ReflectorField(TileEntitySkullRenderer, ModelDragonHead.class, 0);
+	public static ReflectorField TileEntitySkullRenderer_skeletonHead = new ReflectorField(TileEntitySkullRenderer, ModelSkeletonHead.class, 0);
+	public static ReflectorField TileEntitySkullRenderer_humanoidHead = new ReflectorField(TileEntitySkullRenderer, ModelSkeletonHead.class, 1);
+
+	//Vivecraft Forge
+	public static ReflectorMethod ForgeKeyBinding_getKeyConflictContext= new ReflectorMethod(ForgeKeyBinding, "getKeyConflictContext");
+	public static ReflectorMethod FMLClientHandler_beginMinecraftLoading = new ReflectorMethod(FMLClientHandler, "beginMinecraftLoading"); //
+	public static ReflectorMethod FMLClientHandler_finishMinecraftLoading = new ReflectorMethod(FMLClientHandler, "finishMinecraftLoading");
+	public static ReflectorMethod FMLClientHandler_connectToServerAtStartup = new ReflectorMethod(FMLClientHandler, "connectToServerAtStartup");
+	public static ReflectorMethod FMLClientHandler_onInitializationComplete = new ReflectorMethod(FMLClientHandler, "onInitializationComplete");
+	public static ReflectorMethod FMLClientHandler_startIntegratedServer = new ReflectorMethod(FMLClientHandler, "startIntegratedServer");
+	public static ReflectorMethod FMLClientHandler_handleClientWorldClosing = new ReflectorMethod(FMLClientHandler, "handleClientWorldClosing");
+	public static ReflectorMethod FMLClientHandler_handleLoadingScreen = new ReflectorMethod(FMLClientHandler, "handleLoadingScreen");
+	public static ReflectorMethod FMLClientHandler_showInGameModOptions = new ReflectorMethod(FMLClientHandler, "showInGameModOptions");
+	public static ReflectorMethod FMLCommonHandler_handleExit = new ReflectorMethod(FMLCommonHandler, "handleExit");
+	public static ReflectorMethod FMLCommonHandler_onRenderTickStart = new ReflectorMethod(FMLCommonHandler, "onRenderTickStart");
+	public static ReflectorMethod FMLCommonHandler_onRenderTickEnd = new ReflectorMethod(FMLCommonHandler, "onRenderTickEnd");
+	public static ReflectorMethod FMLCommonHandler_onPreClientTick = new ReflectorMethod(FMLCommonHandler, "onPreClientTick");
+	public static ReflectorMethod FMLCommonHandler_onPostClientTick = new ReflectorMethod(FMLCommonHandler, "onPostClientTick");
+	public static ReflectorMethod FMLCommonHandler_fireMouseInput = new ReflectorMethod(FMLCommonHandler, "fireMouseInput");
+	public static ReflectorMethod FMLCommonHandler_fireKeyInput = new ReflectorMethod(FMLCommonHandler, "fireKeyInput");
+	public static ReflectorMethod FMLCommonHandler_onPlayerPreTick = new ReflectorMethod(FMLCommonHandler, "onPlayerPreTick");
+	public static ReflectorMethod FMLCommonHandler_onPlayerPostTick = new ReflectorMethod(FMLCommonHandler, "onPlayerPostTick");
+	public static ReflectorMethod FMLCommonHandler_getModName = new ReflectorMethod(FMLCommonHandler, "getModName");
+	public static ReflectorMethod ForgeItem_getDurabilityForDisplay = new ReflectorMethod(ForgeItem, "getDurabilityForDisplay");
+
+	public static ReflectorClass ForgeInitGuiEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Pre");
+	public static ReflectorConstructor ForgeInitGuiEvent_Pre_Constructor = new ReflectorConstructor(ForgeInitGuiEvent_Pre, new Class[] {GuiScreen.class, List.class});
+	public static ReflectorClass ForgeInitGuiEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Post");
+	public static ReflectorConstructor ForgeInitGuiEvent_Post_Constructor = new ReflectorConstructor(ForgeInitGuiEvent_Post, new Class[] {GuiScreen.class, List.class});
+	public static ReflectorClass ForgeGuiOpenEvent = new ReflectorClass("net.minecraftforge.client.event.GuiOpenEvent");
+	public static ReflectorConstructor ForgeGuiOpenEvent_Constructor = new ReflectorConstructor(ForgeGuiOpenEvent, new Class[] {GuiScreen.class});
+	public static ReflectorField ForgeGuiOpenEvent_gui = new ReflectorField(ForgeGuiOpenEvent, "gui");
+	public static ReflectorMethod ForgeEventFactory_onPlaySoundAtEntity = new ReflectorMethod(ForgeEventFactory, "onPlaySoundAtEntity");
+	public static ReflectorMethod ForgeEventFactory_onClientChat = new ReflectorMethod(ForgeEventFactory, "onClientChat");
+	public static ReflectorMethod ForgeHooks_onThrowableImpact = new ReflectorMethod(ForgeHooks, "onThrowableImpact");
+	public static ReflectorMethod ForgeHooks_onServerChatEvent = new ReflectorMethod(ForgeHooks, "onServerChatEvent");
+	public static ReflectorMethod ForgeHooks_newChatWithLinks = new ReflectorMethod(ForgeHooks, "newChatWithLinks", new Class[]{String.class});
+	public static ReflectorMethod ForgeHooks_onInteractEntityAt = new ReflectorMethod(ForgeHooks, "onInteractEntityAt", new Class[]{EntityPlayer.class, Entity.class, Vec3d.class, ItemStack.class, EnumHand.class});
+	public static ReflectorMethod ForgeHooks_onTravelToDimension = new ReflectorMethod(ForgeHooks, "onTravelToDimension");
+	public static ReflectorMethod ForgeHooks_onEmptyLeftClick = new ReflectorMethod(ForgeHooks, "onEmptyLeftClick", new Class[]{EntityPlayer.class, ItemStack.class});
+	public static ReflectorMethod ForgeHooks_onEmptyClick = new ReflectorMethod(ForgeHooks, "onEmptyClick");
+	public static ReflectorMethod ForgeHooks_onPickBlock = new ReflectorMethod(ForgeHooks, "onPickBlock");
+
+	public static ReflectorClass PlayerInteractionManager = new ReflectorClass(net.minecraft.server.management.PlayerInteractionManager.class);
+	public static ReflectorMethod PlayerInteractionManager_getBlockReachDistance = new ReflectorMethod(PlayerInteractionManager, "getBlockReachDistance");
+
+	public static ReflectorClass ForgeParticleManager = new ReflectorClass(ParticleManager.class);
+	public static ReflectorMethod ForgeParticleManager_addBlockHitEffects = new ReflectorMethod(ForgeParticleManager, "addBlockHitEffects");
+	public static ReflectorMethod ForgeHooksClient_postMouseEvent = new ReflectorMethod(ForgeHooksClient, "postMouseEvent");
+
+	public static ReflectorClass FMLStartupQuery = new ReflectorClass("net.minecraftforge.fml.common.StartupQuery");
+	public static ReflectorMethod FMLStartupQuery_check = new ReflectorMethod(FMLStartupQuery, "check");
+
+	public static ReflectorClass ForgeSession = new ReflectorClass(Session.class);
+	public static ReflectorMethod ForgeSession_hasCachedProperties = new ReflectorMethod(ForgeSession, "hasCachedProperties");
+	public static ReflectorMethod ForgeSession_setProperties= new ReflectorMethod(ForgeSession, "setProperties");
+
+	public static ReflectorClass ForgeWorldEvent_Unload = new ReflectorClass("net.minecraftforge.event.world.WorldEvent$Unload");
+	public static ReflectorConstructor ForgeWorldEvent_Unload_Constructor = new ReflectorConstructor(ForgeWorldEvent_Unload, new Class[]{World.class});
+	public static ReflectorMethod ForgeItem_getFontRenderer = new ReflectorMethod(ForgeItem, "getFontRenderer");
+	public static ReflectorMethod ForgeKeyBinding_isActiveAndMatches = new ReflectorMethod(ForgeKeyBinding, "isActiveAndMatches");
+	public static ReflectorMethod ForgeKeyBinding_getDisplayName= new ReflectorMethod(ForgeKeyBinding, "getDisplayName");
+	public static ReflectorMethod ForgeTileEntity_handleUpdateTag = new ReflectorMethod(ForgeTileEntity, "handleUpdateTag");
+	public static ReflectorMethod ForgeTileEntity_onDataPacket = new ReflectorMethod(ForgeTileEntity, "onDataPacket");
+	public static ReflectorMethod ForgeWorldProvider_getRandomizedSpawnPoint = new ReflectorMethod(ForgeWorldProvider, "getRandomizedSpawnPoint");
+
+	public static ReflectorClass GuiUtils = new ReflectorClass("net.minecraftforge.fml.client.config.GuiUtils");
+	public static ReflectorMethod GuiUtils_preItemToolTip = new ReflectorMethod(GuiUtils, "preItemToolTip");
+	public static ReflectorMethod GuiUtils_postItemToolTip = new ReflectorMethod(GuiUtils, "postItemToolTip");
+	public static ReflectorMethod GuiUtils_drawHoveringText = new ReflectorMethod(GuiUtils, "drawHoveringText", new Class[]{List.class, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, Integer.TYPE, FontRenderer.class});
+
+	public static ReflectorClass ClientCommandHandler = new ReflectorClass("net.minecraftforge.client.ClientCommandHandler");
+	public static ReflectorField ClientCommandHandler_instance = new ReflectorField(ClientCommandHandler, "instance");
+
+	public static ReflectorClass AchievementPage = new ReflectorClass("net.minecraftforge.common.AchievementPage");
+	public static ReflectorMethod AchievementPage_isAchievementInPages = new ReflectorMethod(AchievementPage, "isAchievementInPages");
+	public static ReflectorMethod AchievementPage_getTitle = new ReflectorMethod(AchievementPage, "getTitle");
+	public static ReflectorMethod AchievementPage_getAchievementPages = new ReflectorMethod(AchievementPage, "getAchievementPages");
+	public static ReflectorMethod AchievementPage_getAchievementPage = new ReflectorMethod(AchievementPage, "getAchievementPage", new Class[]{Integer.TYPE});
+	public static ReflectorMethod AchievementPage_getAchievements = new ReflectorMethod(AchievementPage, "getAchievements");
+
+	public static ReflectorClass GameData = new ReflectorClass("net.minecraftforge.fml.common.registry.GameData");
+	public static ReflectorMethod GameData_vanillaSnapshot = new ReflectorMethod(GameData, "vanillaSnapshot");
+
+	public static ReflectorClass DispenseFluidContainer = new ReflectorClass("net.minecraftforge.fluids.DispenseFluidContainer");
+	public static ReflectorMethod DispenseFluidContainer_getInstance = new ReflectorMethod(DispenseFluidContainer, "getInstance");
+	public static ReflectorClass GuiScreenEvent = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent");
+	public static ReflectorClass GuiScreenEvent_ActionPerformedEvent = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent");
+	public static ReflectorMethod GuiScreenEvent_ActionPerformedEvent_getButton = new ReflectorMethod(GuiScreenEvent_ActionPerformedEvent, "getButton");
+	public static ReflectorClass GuiScreenEvent_ActionPerformedEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent$Pre");
+	public static ReflectorConstructor GuiScreenEvent_ActionPerformedEvent_Pre_Constructor = new ReflectorConstructor(GuiScreenEvent_ActionPerformedEvent_Pre, new Class[] {GuiScreen.class, GuiButton.class, List.class});
+	public static ReflectorClass GuiScreenEvent_ActionPerformedEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$ActionPerformedEvent$Post");
+	public static ReflectorConstructor GuiScreenEvent_ActionPerformedEvent_Post_Constructor = new ReflectorConstructor(GuiScreenEvent_ActionPerformedEvent_Post, new Class[] {GuiScreen.class, GuiButton.class, List.class});
+	public static ReflectorClass GuiScreenEvent_InitGuiEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Pre");
+	public static ReflectorConstructor GuiScreenEvent_InitGuiEvent_Pre_Constructor = new ReflectorConstructor(GuiScreenEvent_InitGuiEvent_Pre, new Class[] {GuiScreen.class, List.class});
+	public static ReflectorClass GuiScreenEvent_InitGuiEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$InitGuiEvent$Post");
+	public static ReflectorConstructor GuiScreenEvent_InitGuiEvent_Post_Constructor = new ReflectorConstructor(GuiScreenEvent_InitGuiEvent_Post, new Class[] {GuiScreen.class, List.class});
+	public static ReflectorClass GuiScreenEvent_MouseInputEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$MouseInputEvent$Pre");
+	public static ReflectorConstructor GuiScreenEvent_MouseInputEvent_Pre_Constructor = new ReflectorConstructor(GuiScreenEvent_MouseInputEvent_Pre, new Class[] {GuiScreen.class});
+	public static ReflectorClass GuiScreenEvent_MouseInputEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$MouseInputEvent$Post");
+	public static ReflectorConstructor GuiScreenEvent_MouseInputEvent_Post_Constructor = new ReflectorConstructor(GuiScreenEvent_MouseInputEvent_Post, new Class[] {GuiScreen.class});
+	public static ReflectorClass GuiScreenEvent_KeyboardInputEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$KeyboardInputEvent$Pre");
+	public static ReflectorConstructor GuiScreenEvent_KeyboardInputEvent_Pre_Constructor = new ReflectorConstructor(GuiScreenEvent_KeyboardInputEvent_Pre, new Class[] {GuiScreen.class});
+	public static ReflectorClass GuiScreenEvent_KeyboardInputEvent_Post = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$KeyboardInputEvent$Post");
+	public static ReflectorConstructor GuiScreenEvent_KeyboardInputEvent_Post_Constructor = new ReflectorConstructor(GuiScreenEvent_KeyboardInputEvent_Post, new Class[] {GuiScreen.class});
+	public static ReflectorClass GuiScreenEvent_BackgroundDrawnEvent = new ReflectorClass("net.minecraftforge.client.event.GuiScreenEvent$BackgroundDrawnEvent");
+	public static ReflectorConstructor GuiScreenEvent_BackgroundDrawnEvent_Constructor = new ReflectorConstructor(GuiScreenEvent_BackgroundDrawnEvent, new Class[] {GuiScreen.class});
+
+	public static ReflectorClass RenderPlayerEvent_Pre = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$Pre");
+	public static ReflectorConstructor RenderPlayerEvent_Pre_Constructor = new ReflectorConstructor(RenderPlayerEvent_Pre, new Class[] {EntityPlayer.class, RenderPlayer.class, Float.TYPE, Double.TYPE, Double.TYPE, Double.TYPE});
+	public static ReflectorClass RenderPlayerEvent_Post = new ReflectorClass("net.minecraftforge.client.event.RenderPlayerEvent$Post");
+	public static ReflectorConstructor RenderPlayerEvent_Post_Constructor = new ReflectorConstructor(RenderPlayerEvent_Post, new Class[] {EntityPlayer.class, RenderPlayer.class, Float.TYPE, Double.TYPE, Double.TYPE, Double.TYPE});
+
+	public static ReflectorClass NetworkDispatcher = new ReflectorClass("net.minecraftforge.fml.common.network.handshake.NetworkDispatcher");
+	public static ReflectorMethod NetworkDispatcher_get = new ReflectorMethod(NetworkDispatcher, "get");
+	public static ReflectorMethod NetworkDispatcher_getOverrideDimension = new ReflectorMethod(NetworkDispatcher, "getOverrideDimension");
+
+
+	public static ReflectorClass PlaySoundAtEntityEvent = new ReflectorClass("net.minecraftforge.event.entity.PlaySoundAtEntityEvent");
+	public static ReflectorMethod PlaySoundAtEntityEvent_getSound = new ReflectorMethod(PlaySoundAtEntityEvent, "getSound");
+	public static ReflectorMethod PlaySoundAtEntityEvent_getVolume = new ReflectorMethod(PlaySoundAtEntityEvent, "getVolume");
+	public static ReflectorMethod PlaySoundAtEntityEvent_getPitch = new ReflectorMethod(PlaySoundAtEntityEvent, "getPitch");
+	public static ReflectorMethod PlaySoundAtEntityEvent_getCategory= new ReflectorMethod(PlaySoundAtEntityEvent, "getCategory");
+
+
+	public static ReflectorClass PlayerDropsEvent = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerDropsEvent");
+	public static ReflectorConstructor PlayerDropsEvent_Constructor = new ReflectorConstructor(PlayerDropsEvent, new Class[] {EntityPlayer.class, DamageSource.class, List.class, Boolean.TYPE});
+	public static ReflectorClass PlayerContainerEventOpen = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerContainerEvent$Open");
+	public static ReflectorConstructor PlayerContainerEventOpen_Constructor = new ReflectorConstructor(PlayerContainerEventOpen, new Class[] {EntityPlayer.class, Container.class});
+	public static ReflectorClass PlayerContainerEventClose = new ReflectorClass("net.minecraftforge.event.entity.player.PlayerContainerEvent$Close");
+	public static ReflectorConstructor PlayerContainerEventClose_Constructor = new ReflectorConstructor(PlayerContainerEventClose, new Class[] {EntityPlayer.class, Container.class});
+	public static ReflectorClass AchievementEvent = new ReflectorClass("net.minecraftforge.event.entity.player.AchievementEvent");
+	public static ReflectorConstructor AchievementEvent_Constructor = new ReflectorConstructor(AchievementEvent, new Class[] {EntityPlayer.class, Achievement.class});
+	public static ReflectorClass SplashProgress = new ReflectorClass("net.minecraftforge.fml.client.SplashProgress");
+	public static ReflectorMethod SplashProgress_drawVanillaScreen = new ReflectorMethod(SplashProgress, "drawVanillaScreen");
+	public static ReflectorMethod SplashProgress_clearVanillaResources = new ReflectorMethod(SplashProgress, "clearVanillaResources");
+	public static ReflectorMethod SplashProgress_getMaxTextureSize = new ReflectorMethod(SplashProgress, "getMaxTextureSize");
+	public static ReflectorMethod SplashProgress_pause= new ReflectorMethod(SplashProgress, "pause");
+	public static ReflectorMethod SplashProgress_resume= new ReflectorMethod(SplashProgress, "resume");
+
+
+	public static ReflectorClass FMLCommonProgressManager = new ReflectorClass("net.minecraftforge.fml.common.ProgressManager");
+	public static ReflectorMethod FMLCommonProgressManager_push = new ReflectorMethod(FMLCommonProgressManager, "push", new Class[] {String.class, Integer.TYPE, Boolean.TYPE});
+	public static ReflectorMethod FMLCommonProgressManager_pop = new ReflectorMethod(FMLCommonProgressManager, "pop");
+	public static ReflectorClass FMLCommonProgressManager_ProgressBar = new ReflectorClass("net.minecraftforge.fml.common.ProgressManager$ProgressBar");
+	public static ReflectorMethod FMLCommonProgressManager_ProgressBar_step = new ReflectorMethod(FMLCommonProgressManager_ProgressBar, "step", new Class[] {String.class});
+
+	public static ReflectorClass ForgeGuiIngame = new ReflectorClass("net.minecraftforge.client.GuiIngameForge");
+	public static ReflectorConstructor ForgeGuiIngame_Constructor = new ReflectorConstructor(ForgeGuiIngame, new Class[]{Minecraft.class});
+	public static ReflectorField ForgeGuiIngame_renderCrosshairs = new ReflectorField(ForgeGuiIngame, "renderCrosshairs");
+	public static ReflectorField ForgeGuiIngame_renderHelmet = new ReflectorField(ForgeGuiIngame, "renderHelmet");
+	public static ReflectorClass EnderTeleportEvent = new ReflectorClass("net.minecraftforge.event.entity.living.EnderTeleportEvent");
+	public static ReflectorConstructor EnderTeleportEvent_Constuctor = new ReflectorConstructor(EnderTeleportEvent, new Class[] {EntityLivingBase.class, Double.TYPE, Double.TYPE, Double.TYPE, Float.TYPE});
+	public static ReflectorMethod EnderTeleportEvent_getTargetX = new ReflectorMethod(EnderTeleportEvent, "getTargetX");
+	public static ReflectorMethod EnderTeleportEvent_getTargetY = new ReflectorMethod(EnderTeleportEvent, "getTargetY");
+	public static ReflectorMethod EnderTeleportEvent_getTargetZ = new ReflectorMethod(EnderTeleportEvent, "getTargetZ");
+	public static ReflectorClass Event = new ReflectorClass("net.minecraftforge.fml.common.eventhandler.Event");
+	public static ReflectorMethod Event_isCanceled = new ReflectorMethod(Event, "isCanceled");
+
+	public static boolean forgeExists()
+	{
+		return EventBus.exists();
+	}
+	//End vivecraft forge
+
+	public static void callVoid(ReflectorMethod p_callVoid_0_, Object... p_callVoid_1_){
+		try
+		{
+			Method method = p_callVoid_0_.getTargetMethod();
+
+			if (method == null)
+			{
+				return;
+			}
+
+			method.invoke((Object)null, p_callVoid_1_);
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, (Object)null, p_callVoid_0_, p_callVoid_1_);
+		}
+	}
+
+	public static boolean callBoolean(ReflectorMethod p_callBoolean_0_, Object... p_callBoolean_1_)
+	{
+		try
+		{
+			Method method = p_callBoolean_0_.getTargetMethod();
+
+			if (method == null)
+			{
+				return false;
+			}
+			else
+			{
+				Boolean obool = (Boolean)method.invoke((Object)null, p_callBoolean_1_);
+				return obool.booleanValue();
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, (Object)null, p_callBoolean_0_, p_callBoolean_1_);
+			return false;
+		}
+	}
+
+	public static int callInt(ReflectorMethod p_callInt_0_, Object... p_callInt_1_)
+	{
+		try
+		{
+			Method method = p_callInt_0_.getTargetMethod();
+
+			if (method == null)
+			{
+				return 0;
+			}
+			else
+			{
+				Integer integer = (Integer)method.invoke((Object)null, p_callInt_1_);
+				return integer.intValue();
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, (Object)null, p_callInt_0_, p_callInt_1_);
+			return 0;
+		}
+	}
+
+	public static float callFloat(ReflectorMethod p_callFloat_0_, Object... p_callFloat_1_)
+	{
+		try
+		{
+			Method method = p_callFloat_0_.getTargetMethod();
+
+			if (method == null)
+			{
+				return 0.0F;
+			}
+			else
+			{
+				Float f = (Float)method.invoke((Object)null, p_callFloat_1_);
+				return f.floatValue();
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, (Object)null, p_callFloat_0_, p_callFloat_1_);
+			return 0.0F;
+		}
+	}
+
+	public static double callDouble(ReflectorMethod p_callDouble_0_, Object... p_callDouble_1_)
+	{
+		try
+		{
+			Method method = p_callDouble_0_.getTargetMethod();
+
+			if (method == null)
+			{
+				return 0.0D;
+			}
+			else
+			{
+				Double d0 = (Double)method.invoke((Object)null, p_callDouble_1_);
+				return d0.doubleValue();
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, (Object)null, p_callDouble_0_, p_callDouble_1_);
+			return 0.0D;
+		}
+	}
+
+	public static String callString(ReflectorMethod p_callString_0_, Object... p_callString_1_)
+	{
+		try
+		{
+			Method method = p_callString_0_.getTargetMethod();
+
+			if (method == null)
+			{
+				return null;
+			}
+			else
+			{
+				String s = (String)method.invoke((Object)null, p_callString_1_);
+				return s;
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, (Object)null, p_callString_0_, p_callString_1_);
+			return null;
+		}
+	}
+
+	public static Object call(ReflectorMethod p_call_0_, Object... p_call_1_)
+	{
+		try
+		{
+			Method method = p_call_0_.getTargetMethod();
+
+			if (method == null)
+			{
+				return null;
+			}
+			else
+			{
+				Object object = method.invoke((Object)null, p_call_1_);
+				return object;
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, (Object)null, p_call_0_, p_call_1_);
+			return null;
+		}
+	}
+
+	public static void callVoid(Object p_callVoid_0_, ReflectorMethod p_callVoid_1_, Object... p_callVoid_2_)
+	{
+		try
+		{
+			if (p_callVoid_0_ == null)
+			{
+				return;
+			}
+
+			Method method = p_callVoid_1_.getTargetMethod();
+
+			if (method == null)
+			{
+				return;
+			}
+
+			method.invoke(p_callVoid_0_, p_callVoid_2_);
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, p_callVoid_0_, p_callVoid_1_, p_callVoid_2_);
+		}
+	}
+
+	public static boolean callBoolean(Object p_callBoolean_0_, ReflectorMethod p_callBoolean_1_, Object... p_callBoolean_2_)
+	{
+		try
+		{
+			Method method = p_callBoolean_1_.getTargetMethod();
+
+			if (method == null)
+			{
+				return false;
+			}
+			else
+			{
+				Boolean obool = (Boolean)method.invoke(p_callBoolean_0_, p_callBoolean_2_);
+				return obool.booleanValue();
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, p_callBoolean_0_, p_callBoolean_1_, p_callBoolean_2_);
+			return false;
+		}
+	}
+
+	public static int callInt(Object p_callInt_0_, ReflectorMethod p_callInt_1_, Object... p_callInt_2_)
+	{
+		try
+		{
+			Method method = p_callInt_1_.getTargetMethod();
+
+			if (method == null)
+			{
+				return 0;
+			}
+			else
+			{
+				Integer integer = (Integer)method.invoke(p_callInt_0_, p_callInt_2_);
+				return integer.intValue();
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, p_callInt_0_, p_callInt_1_, p_callInt_2_);
+			return 0;
+		}
+	}
+
+	public static float callFloat(Object p_callFloat_0_, ReflectorMethod p_callFloat_1_, Object... p_callFloat_2_)
+	{
+		try
+		{
+			Method method = p_callFloat_1_.getTargetMethod();
+
+			if (method == null)
+			{
+				return 0.0F;
+			}
+			else
+			{
+				Float f = (Float)method.invoke(p_callFloat_0_, p_callFloat_2_);
+				return f.floatValue();
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, p_callFloat_0_, p_callFloat_1_, p_callFloat_2_);
+			return 0.0F;
+		}
+	}
+
+	public static double callDouble(Object p_callDouble_0_, ReflectorMethod p_callDouble_1_, Object... p_callDouble_2_)
+	{
+		try
+		{
+			Method method = p_callDouble_1_.getTargetMethod();
+
+			if (method == null)
+			{
+				return 0.0D;
+			}
+			else
+			{
+				Double d0 = (Double)method.invoke(p_callDouble_0_, p_callDouble_2_);
+				return d0.doubleValue();
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, p_callDouble_0_, p_callDouble_1_, p_callDouble_2_);
+			return 0.0D;
+		}
+	}
+
+	public static String callString(Object p_callString_0_, ReflectorMethod p_callString_1_, Object... p_callString_2_)
+	{
+		try
+		{
+			Method method = p_callString_1_.getTargetMethod();
+
+			if (method == null)
+			{
+				return null;
+			}
+			else
+			{
+				String s = (String)method.invoke(p_callString_0_, p_callString_2_);
+				return s;
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, p_callString_0_, p_callString_1_, p_callString_2_);
+			return null;
+		}
+	}
+
+	public static Object call(Object p_call_0_, ReflectorMethod p_call_1_, Object... p_call_2_)
+	{
+		try
+		{
+			Method method = p_call_1_.getTargetMethod();
+
+			if (method == null)
+			{
+				return null;
+			}
+			else
+			{
+				Object object = method.invoke(p_call_0_, p_call_2_);
+				return object;
+			}
+		}
+		catch (Throwable throwable)
+		{
+			handleException(throwable, p_call_0_, p_call_1_, p_call_2_);
+			return null;
+		}
+	}
+
+	public static Object getFieldValue(ReflectorField p_getFieldValue_0_)
+	{
+		return getFieldValue((Object)null, p_getFieldValue_0_);
+	}
+
+	public static Object getFieldValue(Object p_getFieldValue_0_, ReflectorField p_getFieldValue_1_)
+	{
+		try
+		{
+			Field field = p_getFieldValue_1_.getTargetField();
+
+			if (field == null)
+			{
+				return null;
+			}
+			else
+			{
+				Object object = field.get(p_getFieldValue_0_);
+				return object;
+			}
+		}
+		catch (Throwable throwable)
+		{
+			throwable.printStackTrace();
+			return null;
+		}
+	}
+
+	public static Object getFieldValue(ReflectorFields p_getFieldValue_0_, int p_getFieldValue_1_)
+	{
+		ReflectorField reflectorfield = p_getFieldValue_0_.getReflectorField(p_getFieldValue_1_);
+		return reflectorfield == null ? null : getFieldValue(reflectorfield);
+	}
+
+	public static Object getFieldValue(Object p_getFieldValue_0_, ReflectorFields p_getFieldValue_1_, int p_getFieldValue_2_)
+	{
+		ReflectorField reflectorfield = p_getFieldValue_1_.getReflectorField(p_getFieldValue_2_);
+		return reflectorfield == null ? null : getFieldValue(p_getFieldValue_0_, reflectorfield);
+	}
+
+	public static float getFieldValueFloat(Object p_getFieldValueFloat_0_, ReflectorField p_getFieldValueFloat_1_, float p_getFieldValueFloat_2_)
+	{
+		Object object = getFieldValue(p_getFieldValueFloat_0_, p_getFieldValueFloat_1_);
+
+		if (!(object instanceof Float))
+		{
+			return p_getFieldValueFloat_2_;
+		}
+		else
+		{
+			Float f = (Float)object;
+			return f.floatValue();
+		}
+	}
+
+	public static boolean setFieldValue(ReflectorField p_setFieldValue_0_, Object p_setFieldValue_1_)
+	{
+		return setFieldValue((Object)null, p_setFieldValue_0_, p_setFieldValue_1_);
+	}
+
+	public static boolean setFieldValue(Object p_setFieldValue_0_, ReflectorField p_setFieldValue_1_, Object p_setFieldValue_2_)
+	{
+		try
+		{
+			Field field = p_setFieldValue_1_.getTargetField();
+
+			if (field == null)
+			{
+				return false;
+			}
+
+			field.set(p_setFieldValue_0_, p_setFieldValue_2_);
+			return true;
+		}
+		catch (Throwable throwable)
+		{
+			throwable.printStackTrace();
+			return false;
+		}
+	}
+
+	public static boolean postForgeBusEvent(ReflectorConstructor p_postForgeBusEvent_0_, Object... p_postForgeBusEvent_1_)
+	{
+		Object object = newInstance(p_postForgeBusEvent_0_, p_postForgeBusEvent_1_);
+		return object == null ? false : postForgeBusEvent(object);
+	}
+
+	public static boolean postForgeBusEvent(Object p_postForgeBusEvent_0_)
+	{
+		if (p_postForgeBusEvent_0_ == null)
+		{
+			return false;
+		}
+		else
+		{
+			Object object = getFieldValue(MinecraftForge_EVENT_BUS);
+
+			if (object == null)
+			{
+				return false;
+			}
+			else
+			{
+				Object object1 = call(object, EventBus_post, new Object[] {p_postForgeBusEvent_0_});
+
+				if (!(object1 instanceof Boolean))
+				{
+					return false;
+				}
+				else
+				{
+					Boolean obool = (Boolean)object1;
+					return obool.booleanValue();
+				}
+			}
+		}
+	}
+
+	public static Object newInstance(ReflectorConstructor p_newInstance_0_, Object... p_newInstance_1_)
+	{
+		Constructor constructor = p_newInstance_0_.getTargetConstructor();
+
+		if (constructor == null)
+		{
+			return null;
+		}
+		else
+		{
+			try
+			{
+				Object object = constructor.newInstance(p_newInstance_1_);
+				return object;
+			}
+			catch (Throwable throwable)
+			{
+				handleException(throwable, p_newInstance_0_, p_newInstance_1_);
+				return null;
+			}
+		}
+	}
+
+	public static Method getMethod(Class p_getMethod_0_, String p_getMethod_1_, Class[] p_getMethod_2_)
+	{
+		Method[] amethod = p_getMethod_0_.getDeclaredMethods();
+
+		for (int i = 0; i < amethod.length; ++i)
+		{
+			Method method = amethod[i];
+
+			if (method.getName().equals(p_getMethod_1_))
+			{
+				Class[] aclass = method.getParameterTypes();
+
+				if (matchesTypes(p_getMethod_2_, aclass))
+				{
+					return method;
+				}
+			}
+		}
+
+		return null;
+	}
+
+	public static Method[] getMethods(Class p_getMethods_0_, String p_getMethods_1_)
+	{
+		List list = new ArrayList();
+		Method[] amethod = p_getMethods_0_.getDeclaredMethods();
+
+		for (int i = 0; i < amethod.length; ++i)
+		{
+			Method method = amethod[i];
+
+			if (method.getName().equals(p_getMethods_1_))
+			{
+				list.add(method);
+			}
+		}
+
+		Method[] amethod1 = (Method[])((Method[])list.toArray(new Method[list.size()]));
+		return amethod1;
+	}
+
+	public static boolean matchesTypes(Class[] p_matchesTypes_0_, Class[] p_matchesTypes_1_)
+	{
+		if (p_matchesTypes_0_.length != p_matchesTypes_1_.length)
+		{
+			return false;
+		}
+		else
+		{
+			for (int i = 0; i < p_matchesTypes_1_.length; ++i)
+			{
+				Class oclass = p_matchesTypes_0_[i];
+				Class oclass1 = p_matchesTypes_1_[i];
+
+				if (oclass != oclass1)
+				{
+					return false;
+				}
+			}
+
+			return true;
+		}
+	}
+
+	private static void dbgCall(boolean p_dbgCall_0_, String p_dbgCall_1_, ReflectorMethod p_dbgCall_2_, Object[] p_dbgCall_3_, Object p_dbgCall_4_)
+	{
+		String s = p_dbgCall_2_.getTargetMethod().getDeclaringClass().getName();
+		String s1 = p_dbgCall_2_.getTargetMethod().getName();
+		String s2 = "";
+
+		if (p_dbgCall_0_)
+		{
+			s2 = " static";
+		}
+
+		Config.dbg(p_dbgCall_1_ + s2 + " " + s + "." + s1 + "(" + Config.arrayToString(p_dbgCall_3_) + ") => " + p_dbgCall_4_);
+	}
+
+	private static void dbgCallVoid(boolean p_dbgCallVoid_0_, String p_dbgCallVoid_1_, ReflectorMethod p_dbgCallVoid_2_, Object[] p_dbgCallVoid_3_)
+	{
+		String s = p_dbgCallVoid_2_.getTargetMethod().getDeclaringClass().getName();
+		String s1 = p_dbgCallVoid_2_.getTargetMethod().getName();
+		String s2 = "";
+
+		if (p_dbgCallVoid_0_)
+		{
+			s2 = " static";
+		}
+
+		Config.dbg(p_dbgCallVoid_1_ + s2 + " " + s + "." + s1 + "(" + Config.arrayToString(p_dbgCallVoid_3_) + ")");
+	}
+
+	private static void dbgFieldValue(boolean p_dbgFieldValue_0_, String p_dbgFieldValue_1_, ReflectorField p_dbgFieldValue_2_, Object p_dbgFieldValue_3_)
+	{
+		String s = p_dbgFieldValue_2_.getTargetField().getDeclaringClass().getName();
+		String s1 = p_dbgFieldValue_2_.getTargetField().getName();
+		String s2 = "";
+
+		if (p_dbgFieldValue_0_)
+		{
+			s2 = " static";
+		}
+
+		Config.dbg(p_dbgFieldValue_1_ + s2 + " " + s + "." + s1 + " => " + p_dbgFieldValue_3_);
+	}
+
+	private static void handleException(Throwable p_handleException_0_, Object p_handleException_1_, ReflectorMethod p_handleException_2_, Object[] p_handleException_3_)
+	{
+		if (p_handleException_0_ instanceof InvocationTargetException)
+		{
+			Throwable throwable = p_handleException_0_.getCause();
+
+			if (throwable instanceof RuntimeException)
+			{
+				RuntimeException runtimeexception = (RuntimeException)throwable;
+				throw runtimeexception;
+			}
+			else
+			{
+				p_handleException_0_.printStackTrace();
+			}
+		}
+		else
+		{
+			if (p_handleException_0_ instanceof IllegalArgumentException)
+			{
+				Config.warn("*** IllegalArgumentException ***");
+				Config.warn("Method: " + p_handleException_2_.getTargetMethod());
+				Config.warn("Object: " + p_handleException_1_);
+				Config.warn("Parameter classes: " + Config.arrayToString(getClasses(p_handleException_3_)));
+				Config.warn("Parameters: " + Config.arrayToString(p_handleException_3_));
+			}
+
+			Config.warn("*** Exception outside of method ***");
+			Config.warn("Method deactivated: " + p_handleException_2_.getTargetMethod());
+			p_handleException_2_.deactivate();
+			p_handleException_0_.printStackTrace();
+		}
+	}
+
+	private static void handleException(Throwable p_handleException_0_, ReflectorConstructor p_handleException_1_, Object[] p_handleException_2_)
+	{
+		if (p_handleException_0_ instanceof InvocationTargetException)
+		{
+			p_handleException_0_.printStackTrace();
+		}
+		else
+		{
+			if (p_handleException_0_ instanceof IllegalArgumentException)
+			{
+				Config.warn("*** IllegalArgumentException ***");
+				Config.warn("Constructor: " + p_handleException_1_.getTargetConstructor());
+				Config.warn("Parameter classes: " + Config.arrayToString(getClasses(p_handleException_2_)));
+				Config.warn("Parameters: " + Config.arrayToString(p_handleException_2_));
+			}
+
+			Config.warn("*** Exception outside of constructor ***");
+			Config.warn("Constructor deactivated: " + p_handleException_1_.getTargetConstructor());
+			p_handleException_1_.deactivate();
+			p_handleException_0_.printStackTrace();
+		}
+	}
+
+	private static Object[] getClasses(Object[] p_getClasses_0_)
+	{
+		if (p_getClasses_0_ == null)
+		{
+			return new Class[0];
+		}
+		else
+		{
+			Class[] aclass = new Class[p_getClasses_0_.length];
+
+			for (int i = 0; i < aclass.length; ++i)
+			{
+				Object object = p_getClasses_0_[i];
+
+				if (object != null)
+				{
+					aclass[i] = object.getClass();
+				}
+			}
+
+			return aclass;
+		}
+	}
+
+	public static Field getField(Class p_getField_0_, Class p_getField_1_)
+	{
+		try
+		{
+			Field[] afield = p_getField_0_.getDeclaredFields();
+
+			for (int i = 0; i < afield.length; ++i)
+			{
+				Field field = afield[i];
+
+				if (field.getType() == p_getField_1_)
+				{
+					field.setAccessible(true);
+					return field;
+				}
+			}
+
+			return null;
+		}
+		catch (Exception var5)
+		{
+			return null;
+		}
+	}
+
+	public static Field[] getFields(Class p_getFields_0_, Class p_getFields_1_)
+	{
+		List list = new ArrayList();
+
+		try
+		{
+			Field[] afield = p_getFields_0_.getDeclaredFields();
+
+			for (int i = 0; i < afield.length; ++i)
+			{
+				Field field = afield[i];
+
+				if (field.getType() == p_getFields_1_)
+				{
+					field.setAccessible(true);
+					list.add(field);
+				}
+			}
+
+			Field[] afield1 = (Field[])((Field[])list.toArray(new Field[list.size()]));
+			return afield1;
+		}
+		catch (Exception var6)
+		{
+			return null;
+		}
+	}
+
+	public static ReflectorField getReflectorField(Class p_getReflectorField_0_, Class p_getReflectorField_1_)
+	{
+		Field field = getField(p_getReflectorField_0_, p_getReflectorField_1_);
+
+		if (field == null)
+		{
+			return null;
+		}
+		else
+		{
+			ReflectorClass reflectorclass = new ReflectorClass(p_getReflectorField_0_);
+			return new ReflectorField(reflectorclass, field.getName());
+		}
+	}
 }
