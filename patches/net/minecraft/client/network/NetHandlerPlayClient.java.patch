--- a/net/minecraft/client/network/NetHandlerPlayClient.java
+++ b/net/minecraft/client/network/NetHandlerPlayClient.java
@@ -1,9 +1,14 @@
 package net.minecraft.client.network;
 
+import com.google.common.base.Charsets;
 import com.google.common.collect.Maps;
 import com.google.common.util.concurrent.FutureCallback;
 import com.google.common.util.concurrent.Futures;
 import com.mojang.authlib.GameProfile;
+import com.mtbs3d.minecrift.api.NetworkHelper;
+import com.mtbs3d.minecrift.api.NetworkHelper.PacketDiscriminators;
+import com.mtbs3d.minecrift.render.PlayerModelController;
+
 import io.netty.buffer.Unpooled;
 import java.io.File;
 import java.io.IOException;
@@ -202,6 +207,7 @@
 import net.minecraft.scoreboard.ScorePlayerTeam;
 import net.minecraft.scoreboard.Scoreboard;
 import net.minecraft.scoreboard.Team;
+import net.minecraft.src.Reflector;
 import net.minecraft.stats.Achievement;
 import net.minecraft.stats.AchievementList;
 import net.minecraft.stats.StatBase;
@@ -303,6 +309,17 @@
     {
         PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
         this.gameController.playerController = new PlayerControllerMP(this.gameController, this);
+        //Forge
+        int dimension = packetIn.getDimension();
+        if(Reflector.forgeExists())
+        {
+        	Object nd = Reflector.call(Reflector.NetworkDispatcher_get, this.getNetworkManager());
+        	dimension = Reflector.callInt(nd, Reflector.NetworkDispatcher_getOverrideDimension, packetIn);
+        }
+        this.clientWorldController = new WorldClient(this, new WorldSettings(0L, packetIn.getGameType(), false, packetIn.isHardcoreMode(), packetIn.getWorldType()),
+        		dimension,
+        		packetIn.getDifficulty(), this.gameController.mcProfiler);
+        //
         this.clientWorldController = new WorldClient(this, new WorldSettings(0L, packetIn.getGameType(), false, packetIn.isHardcoreMode(), packetIn.getWorldType()), packetIn.getDimension(), packetIn.getDifficulty(), this.gameController.mcProfiler);
         this.gameController.gameSettings.difficulty = packetIn.getDifficulty();
         this.gameController.loadWorld(this.clientWorldController);
@@ -314,6 +331,16 @@
         this.gameController.playerController.setGameType(packetIn.getGameType());
         this.gameController.gameSettings.sendSettingsToServer();
         this.netManager.sendPacket(new CPacketCustomPayload("MC|Brand", (new PacketBuffer(Unpooled.buffer())).writeString(ClientBrandRetriever.getClientModName())));
+        
+        // VIVE START - ask server if it's running this mod
+        byte[] version = Minecraft.getMinecraft().minecriftVerString.getBytes(Charsets.UTF_8);
+        String s = "Vivecraft";
+        PacketBuffer pb = new PacketBuffer(Unpooled.buffer());
+		pb.writeBytes(s.getBytes());
+        this.netManager.sendPacket(new CPacketCustomPayload("REGISTER", pb ));
+        this.netManager.sendPacket(new CPacketCustomPayload("MC|Vive|Version", (new PacketBuffer(Unpooled.buffer())).writeString(Minecraft.getMinecraft().minecriftVerString)));
+        this.netManager.sendPacket(NetworkHelper.getVivecraftClientPacket(PacketDiscriminators.VERSION, version));
+        // VIVE END - ask server if it's running this mod
     }
 
     /**
@@ -805,10 +832,15 @@
             BlockPos blockpos = new BlockPos(nbttagcompound.getInteger("x"), nbttagcompound.getInteger("y"), nbttagcompound.getInteger("z"));
             TileEntity tileentity = this.clientWorldController.getTileEntity(blockpos);
 
+            //Forge
             if (tileentity != null)
             {
-                tileentity.readFromNBT(nbttagcompound);
+            	if(Reflector.forgeExists())
+            		Reflector.call(tileentity, Reflector.ForgeTileEntity_handleUpdateTag, nbttagcompound);
+            	else
+            		tileentity.readFromNBT(nbttagcompound);
             }
+            //
         }
     }
 
@@ -896,16 +928,25 @@
      */
     public void handleChat(SPacketChat packetIn)
     {
-        PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
+    	PacketThreadUtil.checkThreadAndEnqueue(packetIn, this, this.gameController);
 
-        if (packetIn.getType() == 2)
-        {
-            this.gameController.ingameGUI.setOverlayMessage(packetIn.getChatComponent(), false);
-        }
-        else
-        {
-            this.gameController.ingameGUI.getChatGUI().printChatMessage(packetIn.getChatComponent());
-        }
+    	ITextComponent message = packetIn.getChatComponent();
+    	
+    	//Forge
+    	if(Reflector.forgeExists()){
+    		message = (ITextComponent) Reflector.call(Reflector.ForgeEventFactory_onClientChat, packetIn.getType(), packetIn.getChatComponent());
+    		if (message == null) return;
+    	}
+    	//
+    	
+    	if (packetIn.getType() == 2)
+    	{
+    		this.gameController.ingameGUI.setOverlayMessage(message, false);
+    	}
+    	else
+    	{
+    		this.gameController.ingameGUI.getChatGUI().printChatMessage(message);
+    	}
     }
 
     /**
@@ -1044,6 +1085,12 @@
 
                     if (entity1 == this.gameController.player && !flag)
                     {
+                    	//Forge
+                    	String msg = GameSettings.getKeyDisplayString(this.gameController.gameSettings.keyBindSneak.getKeyCode());
+                    	if (Reflector.forgeExists())
+                    		msg = Reflector.callString(this.gameController.gameSettings.keyBindSneak,
+                    				Reflector.ForgeKeyBinding_getDisplayName);
+                    	//
                         this.gameController.ingameGUI.setOverlayMessage(I18n.format("mount.onboard", new Object[] {GameSettings.getKeyDisplayString(this.gameController.gameSettings.keyBindSneak.getKeyCode())}), false);
                     }
                 }
@@ -1116,10 +1163,16 @@
         {
             this.doneLoadingTerrain = false;
             Scoreboard scoreboard = this.clientWorldController.getScoreboard();
+        
+            int dimId = packetIn.getDimensionID();
+            if (Reflector.forgeExists())
+            	Reflector.call(Reflector.call(Reflector.NetworkDispatcher_get, getNetworkManager()), Reflector.NetworkDispatcher_getOverrideDimension, packetIn);
+
             this.clientWorldController = new WorldClient(this, new WorldSettings(0L, packetIn.getGameType(), false, this.gameController.world.getWorldInfo().isHardcoreModeEnabled(), packetIn.getWorldType()), packetIn.getDimensionID(), packetIn.getDifficulty(), this.gameController.mcProfiler);
             this.clientWorldController.setWorldScoreboard(scoreboard);
             this.gameController.loadWorld(this.clientWorldController);
             this.gameController.player.dimension = packetIn.getDimensionID();
+
             this.gameController.displayGuiScreen(new GuiDownloadTerrain(this));
         }
 
@@ -1305,6 +1358,18 @@
             {
                 tileentity.readFromNBT(packetIn.getNbtCompound());
             }
+            //Forge
+            else
+            {
+            	if(tileentity == null)
+            	{
+            		LOGGER.error("Received invalid update packet for null tile entity at {} with data: {}", packetIn.getPos(), packetIn.getNbtCompound());
+            		return;
+            	}
+            	if(Reflector.forgeExists())
+            		Reflector.call(tileentity, Reflector.ForgeTileEntity_onDataPacket, netManager, packetIn);
+            }
+            //
 
             if (flag && this.gameController.currentScreen instanceof GuiCommandBlock)
             {
@@ -1416,15 +1481,41 @@
             }
             else if (f == 101.0F)
             {
-                this.gameController.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.movement", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindForward.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindLeft.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindBack.getKeyCode()), GameSettings.getKeyDisplayString(gamesettings.keyBindRight.getKeyCode())}));
+            	//Forge
+            	String msg1 = GameSettings.getKeyDisplayString(this.gameController.gameSettings.keyBindForward.getKeyCode());
+            	String msg2 = GameSettings.getKeyDisplayString(this.gameController.gameSettings.keyBindLeft.getKeyCode());
+            	String msg3 = GameSettings.getKeyDisplayString(this.gameController.gameSettings.keyBindBack.getKeyCode());
+            	String msg4 = GameSettings.getKeyDisplayString(this.gameController.gameSettings.keyBindRight.getKeyCode());
+
+            	if (Reflector.forgeExists()){
+            		msg1 = Reflector.callString(this.gameController.gameSettings.keyBindForward,
+            				Reflector.ForgeKeyBinding_getDisplayName);
+           		msg2 = Reflector.callString(this.gameController.gameSettings.keyBindLeft,
+        				Reflector.ForgeKeyBinding_getDisplayName);       
+           		msg3 = Reflector.callString(this.gameController.gameSettings.keyBindBack,
+                				Reflector.ForgeKeyBinding_getDisplayName);
+           		msg4 = Reflector.callString(this.gameController.gameSettings.keyBindRight,
+        				Reflector.ForgeKeyBinding_getDisplayName);
+            	}
+            	//
+            	
+                this.gameController.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.movement", new Object[] {msg1, msg2, msg3, msg4}));
             }
             else if (f == 102.0F)
             {
-                this.gameController.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.jump", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindJump.getKeyCode())}));
+            	String msg1 = GameSettings.getKeyDisplayString(this.gameController.gameSettings.keyBindJump.getKeyCode());
+            	if (Reflector.forgeExists())
+            		msg1 = Reflector.callString(this.gameController.gameSettings.keyBindJump,
+            				Reflector.ForgeKeyBinding_getDisplayName);
+                this.gameController.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.jump", new Object[] {msg1}));
             }
             else if (f == 103.0F)
             {
-                this.gameController.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.inventory", new Object[] {GameSettings.getKeyDisplayString(gamesettings.keyBindInventory.getKeyCode())}));
+            	String msg1 = GameSettings.getKeyDisplayString(this.gameController.gameSettings.keyBindInventory.getKeyCode());
+            	if (Reflector.forgeExists())
+            		msg1 = Reflector.callString(this.gameController.gameSettings.keyBindInventory,
+            				Reflector.ForgeKeyBinding_getDisplayName);
+                this.gameController.ingameGUI.getChatGUI().printChatMessage(new TextComponentTranslation("demo.help.inventory", new Object[] {msg1}));
             }
         }
         else if (i == 6)
@@ -1525,7 +1616,7 @@
 
         if (entity instanceof EntityLivingBase)
         {
-            Potion potion = Potion.getPotionById(packetIn.getEffectId());
+            Potion potion = Potion.getPotionById(packetIn.getEffectId() & 0xff); //Forge adds the and
 
             if (potion != null)
             {
@@ -1928,6 +2019,47 @@
             String s1 = packetbuffer2.readString(256);
             this.gameController.getSoundHandler().stop(s1, SoundCategory.getByName(s));
         }
+        // VIVE START - server told us that it has this mod too, allow extended reach, etc.
+        else if ("MC|ViveOK".equals(packetIn.getChannelName()))
+        { //allowed, set to user preference.
+
+        } 
+        else if ("Vivecraft".equals(packetIn.getChannelName()))
+        { 
+        	PacketBuffer packetbuffer = packetIn.getBufferData(); 	
+        	PacketDiscriminators dis = PacketDiscriminators.values()[packetbuffer.readByte()];
+          			
+        	switch (dis){
+        	case VERSION:
+        		String v = packetbuffer.readString(1024);
+        		this.gameController.printChatMessage("Vivecraft server mod detected: " + v);
+        		break;
+        	case REQUESTDATA:
+        		NetworkHelper.serverWantsData = true;
+        		break;
+        	case UBERPACKET:
+        		Long hi = packetbuffer.readLong();
+        		Long low = packetbuffer.readLong();
+        		byte[] hmd = packetbuffer.readBytes(29).array();
+        		byte[] c0 = packetbuffer.readBytes(29).array();       		
+        		byte[] c1 = packetbuffer.readBytes(29).array();
+		
+        		UUID u = new UUID(hi, low);
+        		
+        		PlayerModelController.getInstance().Update(u, hmd, c0, c1);    		
+        		break;
+        	default:
+        		break;
+        	}
+
+        	packetbuffer.release();
+        }
+        else if ("REGISTER".equals(packetIn.getChannelName())){
+        	PacketBuffer packetbuffer = packetIn.getBufferData(); 
+        	String v = new String(packetbuffer.array(),Charsets.UTF_8);
+        	System.out.println("REGISTER " + v );
+        }
+        // VIVE END
     }
 
     /**
